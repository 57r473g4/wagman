   1               		.file	"Caterina.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB104:
  14               		.file 1 "Caterina.c"
   1:Caterina.c    **** /*
   2:Caterina.c    ****              LUFA Library
   3:Caterina.c    ****      Copyright (C) Dean Camera, 2011.
   4:Caterina.c    **** 
   5:Caterina.c    ****   dean [at] fourwalledcubicle [dot] com
   6:Caterina.c    ****            www.lufa-lib.org
   7:Caterina.c    **** */
   8:Caterina.c    **** 
   9:Caterina.c    **** /*
  10:Caterina.c    ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Caterina.c    **** 
  12:Caterina.c    ****   Permission to use, copy, modify, distribute, and sell this
  13:Caterina.c    ****   software and its documentation for any purpose is hereby granted
  14:Caterina.c    ****   without fee, provided that the above copyright notice appear in
  15:Caterina.c    ****   all copies and that both that the copyright notice and this
  16:Caterina.c    ****   permission notice and warranty disclaimer appear in supporting
  17:Caterina.c    ****   documentation, and that the name of the author not be used in
  18:Caterina.c    ****   advertising or publicity pertaining to distribution of the
  19:Caterina.c    ****   software without specific, written prior permission.
  20:Caterina.c    **** 
  21:Caterina.c    ****   The author disclaim all warranties with regard to this
  22:Caterina.c    ****   software, including all implied warranties of merchantability
  23:Caterina.c    ****   and fitness.  In no event shall the author be liable for any
  24:Caterina.c    ****   special, indirect or consequential damages or any damages
  25:Caterina.c    ****   whatsoever resulting from loss of use, data or profits, whether
  26:Caterina.c    ****   in an action of contract, negligence or other tortious action,
  27:Caterina.c    ****   arising out of or in connection with the use or performance of
  28:Caterina.c    ****   this software.
  29:Caterina.c    **** */
  30:Caterina.c    **** 
  31:Caterina.c    **** /** \file
  32:Caterina.c    ****  *
  33:Caterina.c    ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  34:Caterina.c    ****  */
  35:Caterina.c    **** 
  36:Caterina.c    **** #define  INCLUDE_FROM_CATERINA_C
  37:Caterina.c    **** #include "Caterina.h"
  38:Caterina.c    **** 
  39:Caterina.c    **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  40:Caterina.c    ****  *  operating systems will not open the port unless the settings can be set successfully.
  41:Caterina.c    ****  */
  42:Caterina.c    **** static CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 0,
  43:Caterina.c    ****                                            .CharFormat  = CDC_LINEENCODING_OneStopBit,
  44:Caterina.c    ****                                            .ParityType  = CDC_PARITY_None,
  45:Caterina.c    ****                                            .DataBits    = 8                            };
  46:Caterina.c    **** 
  47:Caterina.c    **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  48:Caterina.c    ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  49:Caterina.c    ****  *  command.)
  50:Caterina.c    ****  */
  51:Caterina.c    **** static uint32_t CurrAddress;
  52:Caterina.c    **** 
  53:Caterina.c    **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  54:Caterina.c    ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  55:Caterina.c    ****  *  loop until the AVR restarts and the application runs.
  56:Caterina.c    ****  */
  57:Caterina.c    **** static bool RunBootloader = true;
  58:Caterina.c    **** /* Pulse generation counters to keep track of the time remaining for each pulse type */
  59:Caterina.c    **** #define TX_RX_LED_PULSE_PERIOD 100
  60:Caterina.c    **** uint16_t TxLEDPulse = 0; // time remaining for Tx LED pulse
  61:Caterina.c    **** uint16_t RxLEDPulse = 0; // time remaining for Rx LED pulse
  62:Caterina.c    **** 
  63:Caterina.c    **** /* Bootloader timeout timer */
  64:Caterina.c    **** #define TIMEOUT_PERIOD	8000
  65:Caterina.c    **** uint16_t Timeout = 0;
  66:Caterina.c    **** 
  67:Caterina.c    **** uint16_t bootKey = 0x7777;
  68:Caterina.c    **** volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;
  69:Caterina.c    **** 
  70:Caterina.c    **** void StartSketch(void)
  71:Caterina.c    **** {
  72:Caterina.c    **** 	cli();
  73:Caterina.c    **** 	PORTD = (0x00);
  74:Caterina.c    **** 	/* Undo TIMER1 setup and clear the count before running the sketch */
  75:Caterina.c    **** 	TIMSK1 = 0;
  76:Caterina.c    **** 	TCCR1B = 0;
  77:Caterina.c    **** 	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
  78:Caterina.c    **** 	TCNT1L = 0;
  79:Caterina.c    **** 
  80:Caterina.c    **** 	/* Relocate the interrupt vector table to the application section */
  81:Caterina.c    **** 	MCUCR = (1 << IVCE);
  82:Caterina.c    **** 	MCUCR = 0;
  83:Caterina.c    **** 
  84:Caterina.c    **** 	L_LED_OFF();
  85:Caterina.c    **** 	TX_LED_OFF();
  86:Caterina.c    **** 	RX_LED_OFF();
  87:Caterina.c    **** 
  88:Caterina.c    **** 
  89:Caterina.c    **** 	/* jump to beginning of application space */
  90:Caterina.c    **** 	__asm__ volatile("jmp 0x0000");
  91:Caterina.c    **** }
  92:Caterina.c    **** 
  93:Caterina.c    **** /*	Breathing animation on L LED indicates bootloader is running */
  94:Caterina.c    **** uint16_t LLEDPulse;
  95:Caterina.c    **** void LEDPulse(void)
  96:Caterina.c    **** {
  97:Caterina.c    **** 	LLEDPulse++;
  98:Caterina.c    **** 	uint8_t p = LLEDPulse >> 8;
  99:Caterina.c    **** 	if (p > 127)
 100:Caterina.c    **** 		p = 254-p;
 101:Caterina.c    **** 	p += p;
 102:Caterina.c    **** 	if (((uint8_t)LLEDPulse) > p)
 103:Caterina.c    **** 		L_LED_OFF();
 104:Caterina.c    **** 	else
 105:Caterina.c    **** 		L_LED_ON();
 106:Caterina.c    **** }
 107:Caterina.c    **** 
 108:Caterina.c    **** 
 109:Caterina.c    **** void TURN_ON_NC (void)
 110:Caterina.c    **** {
 111:Caterina.c    ****   NC_LATCH_OFF();
 112:Caterina.c    ****   NC_POW_ON();
 113:Caterina.c    ****   _delay_ms(6);
 114:Caterina.c    ****   NC_LATCH_ON();
 115:Caterina.c    ****   _delay_ms(6);
 116:Caterina.c    ****   NC_LATCH_OFF();
 117:Caterina.c    **** }
 118:Caterina.c    **** 
 119:Caterina.c    **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 120:Caterina.c    ****  *  runs the bootloader processing routine until it times out or is instructed to exit.
 121:Caterina.c    ****  */
 122:Caterina.c    **** int main(void)
 123:Caterina.c    **** {
 124:Caterina.c    **** 	// we have to do this, else the transients kick in and turn the relay ON.
 125:Caterina.c    **** 	DDRD = 0xff;
 126:Caterina.c    **** 	uint8_t boot_setting_nc  = 0x00;
 127:Caterina.c    **** 	/* Save the value of the boot key memory before it is overwritten */
 128:Caterina.c    **** 	uint16_t bootKeyPtrVal = *bootKeyPtr;
 129:Caterina.c    **** 	*bootKeyPtr = 0;
 130:Caterina.c    **** 	
 131:Caterina.c    **** 	/* Check the reason for the reset so we can act accordingly */
 132:Caterina.c    **** 	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
 133:Caterina.c    **** 	
 134:Caterina.c    **** 	MCUSR = 0;							// clear all reset flags
 135:Caterina.c    **** 	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
 136:Caterina.c    **** 	wdt_disable();
 137:Caterina.c    **** 	
 138:Caterina.c    **** 	/*
 139:Caterina.c    **** 	if (mcusr_state & (1<<EXTRF)) {
 140:Caterina.c    **** 		// External reset -  we should continue to self-programming mode.
 141:Caterina.c    **** 	} 
 142:Caterina.c    **** 	
 143:Caterina.c    **** 	else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {
 144:Caterina.c    **** 		// After a power-on reset skip the bootloader and jump straight to sketch
 145:Caterina.c    **** 		// if one exists.
 146:Caterina.c    **** 		StartSketch();
 147:Caterina.c    **** 	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)
 148:Caterina.c    **** 		// If it looks like an "accidental" watchdog reset then start the sketch.
 149:Caterina.c    **** 		StartSketch();
 150:Caterina.c    **** 	}
 151:Caterina.c    **** 	*/
 152:Caterina.c    **** 
 153:Caterina.c    **** 
 154:Caterina.c    **** 	/* Setup hardware required for the bootloader */
 155:Caterina.c    **** 	SetupHardware();
 156:Caterina.c    **** 	
 157:Caterina.c    **** 	
 158:Caterina.c    **** 	/* we are going to enable the Node Controller if the EEPROM says we have to enable it */
 159:Caterina.c    **** 	// 	Enable NC in boot loader stage - one byte represents both the mode and if it has to be booted
 160:Caterina.c    **** 	
 161:Caterina.c    **** 	boot_setting_nc = eeprom_read_byte( (uint8_t*) 0x40);
 162:Caterina.c    **** 	  
 163:Caterina.c    **** 	if( boot_setting_nc  == 0x01)
 164:Caterina.c    **** 	  { // We need to boot the NC, we are in FW update mode.
 165:Caterina.c    **** 	      NC_BOOT_PINS_SETUP();
 166:Caterina.c    **** 	      NC_uSD();// This is uSD boot mode.
 167:Caterina.c    **** 	      _delay_ms(100);
 168:Caterina.c    **** 	      TURN_ON_NC();
 169:Caterina.c    **** 	  }
 170:Caterina.c    **** 	
 171:Caterina.c    **** 	else if ( boot_setting_nc == 0x02)
 172:Caterina.c    **** 	  { // We need to boot the NC, we are in FW update mode. 
 173:Caterina.c    **** 		  NC_BOOT_PINS_SETUP();
 174:Caterina.c    **** 		  NC_eMMC(); // This is emmc boot mode. 
 175:Caterina.c    **** 		  _delay_ms(100);
 176:Caterina.c    **** 		  TURN_ON_NC();
 177:Caterina.c    **** 	  }
 178:Caterina.c    **** 	  
 179:Caterina.c    **** 	_delay_ms(4000);
 180:Caterina.c    **** 	
 181:Caterina.c    **** 	/* Enable global interrupts so that the USB stack can function */
 182:Caterina.c    **** 	sei();
 183:Caterina.c    **** 	Timeout = 0;
 184:Caterina.c    **** 	
 185:Caterina.c    **** 	while (RunBootloader)
 186:Caterina.c    **** 	{
 187:Caterina.c    **** 		NC_eMMC();
 188:Caterina.c    **** 		PORTD = (0x10);
 189:Caterina.c    **** 		CDC_Task();
 190:Caterina.c    **** 		USB_USBTask();
 191:Caterina.c    **** 		/* Time out and start the sketch if one is present */
 192:Caterina.c    **** 		if (Timeout > TIMEOUT_PERIOD)
 193:Caterina.c    **** 			RunBootloader = false;
 194:Caterina.c    **** 		LEDPulse();
 195:Caterina.c    **** 	}
 196:Caterina.c    **** 
 197:Caterina.c    **** 	/* Disconnect from the host - USB interface will be reset later along with the AVR */
 198:Caterina.c    **** 	USB_Detach();
 199:Caterina.c    **** 	/* Jump to beginning of application space to run the sketch - do not reset */
 200:Caterina.c    **** 	StartSketch();
 201:Caterina.c    **** }
 202:Caterina.c    **** 
 203:Caterina.c    **** /** Configures all hardware required for the bootloader. */
 204:Caterina.c    **** void SetupHardware(void)
 205:Caterina.c    **** {
 206:Caterina.c    **** 	/* Disable watchdog if enabled by bootloader/fuses */
 207:Caterina.c    **** 	MCUSR &= ~(1 << WDRF);
 208:Caterina.c    **** 	wdt_disable();
 209:Caterina.c    **** 
 210:Caterina.c    **** 	/* Disable clock division */
 211:Caterina.c    **** 	clock_prescale_set(clock_div_1);
 212:Caterina.c    **** 
 213:Caterina.c    **** 	/* Relocate the interrupt vector table to the bootloader section */
 214:Caterina.c    **** 	MCUCR = (1 << IVCE);
 215:Caterina.c    **** 	MCUCR = (1 << IVSEL);
 216:Caterina.c    **** 
 217:Caterina.c    **** 	LED_SETUP();
 218:Caterina.c    **** 	
 219:Caterina.c    **** 	CPU_PRESCALE(0);
 220:Caterina.c    **** 	L_LED_OFF();
 221:Caterina.c    **** 	TX_LED_OFF();
 222:Caterina.c    **** 	RX_LED_OFF();
 223:Caterina.c    **** 
 224:Caterina.c    **** 	/* Initialize TIMER1 to handle bootloader timeout and LED tasks.
 225:Caterina.c    **** 	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
 226:Caterina.c    **** 	 * Our chosen compare match generates an interrupt every 1 ms.
 227:Caterina.c    **** 	 * This interrupt is disabled selectively when doing memory reading, erasing,
 228:Caterina.c    **** 	 * or writing since SPM has tight timing requirements.
 229:Caterina.c    **** 	 */
 230:Caterina.c    **** 	OCR1AH = 0;
 231:Caterina.c    **** 	OCR1AL = 250;
 232:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 233:Caterina.c    **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 234:Caterina.c    **** 
 235:Caterina.c    **** 	/* Initialize USB Subsystem */
 236:Caterina.c    **** 	USB_Init();
 237:Caterina.c    **** }
 238:Caterina.c    **** 
 239:Caterina.c    **** //uint16_t ctr = 0;
 240:Caterina.c    **** ISR(TIMER1_COMPA_vect, ISR_BLOCK)
 241:Caterina.c    **** {
 242:Caterina.c    **** 	/* Reset counter */
 243:Caterina.c    **** 	TCNT1H = 0;
 244:Caterina.c    **** 	TCNT1L = 0;
 245:Caterina.c    **** 
 246:Caterina.c    **** 	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
 247:Caterina.c    **** 	if (TxLEDPulse && !(--TxLEDPulse))
 248:Caterina.c    **** 		TX_LED_OFF();
 249:Caterina.c    **** 	if (RxLEDPulse && !(--RxLEDPulse))
 250:Caterina.c    **** 		RX_LED_OFF();
 251:Caterina.c    **** 
 252:Caterina.c    **** 	if (pgm_read_word(0) != 0xFFFF)
 253:Caterina.c    **** 		Timeout++;
 254:Caterina.c    **** }
 255:Caterina.c    **** 
 256:Caterina.c    **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 257:Caterina.c    ****  *  to relay data to and from the attached USB host.
 258:Caterina.c    ****  */
 259:Caterina.c    **** void EVENT_USB_Device_ConfigurationChanged(void)
 260:Caterina.c    **** {
 261:Caterina.c    **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 262:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 263:Caterina.c    **** 	                           ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 264:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 265:Caterina.c    **** 
 266:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 267:Caterina.c    **** 	                           ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 268:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 269:Caterina.c    **** 
 270:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 271:Caterina.c    **** 	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 272:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 273:Caterina.c    **** }
 274:Caterina.c    **** 
 275:Caterina.c    **** /** Event handler for the USB_ControlRequest event. This is used to catch and process control reque
 276:Caterina.c    ****  *  the device from the USB host before passing along unhandled control requests to the library for
 277:Caterina.c    ****  *  internally.
 278:Caterina.c    ****  */
 279:Caterina.c    **** void EVENT_USB_Device_ControlRequest(void)
 280:Caterina.c    **** {
 281:Caterina.c    **** 	/* Ignore any requests that aren't directed to the CDC interface */
 282:Caterina.c    **** 	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 283:Caterina.c    **** 	    (REQTYPE_CLASS | REQREC_INTERFACE))
 284:Caterina.c    **** 	{
 285:Caterina.c    **** 		return;
 286:Caterina.c    **** 	}
 287:Caterina.c    **** 
 288:Caterina.c    **** 	/* Process CDC specific control requests */
 289:Caterina.c    **** 	switch (USB_ControlRequest.bRequest)
 290:Caterina.c    **** 	{
 291:Caterina.c    **** 		case CDC_REQ_GetLineEncoding:
 292:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 293:Caterina.c    **** 			{
 294:Caterina.c    **** 				Endpoint_ClearSETUP();
 295:Caterina.c    **** 
 296:Caterina.c    **** 				/* Write the line coding data to the control endpoint */
 297:Caterina.c    **** 				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 298:Caterina.c    **** 				Endpoint_ClearOUT();
 299:Caterina.c    **** 			}
 300:Caterina.c    **** 
 301:Caterina.c    **** 			break;
 302:Caterina.c    **** 		case CDC_REQ_SetLineEncoding:
 303:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 304:Caterina.c    **** 			{
 305:Caterina.c    **** 				Endpoint_ClearSETUP();
 306:Caterina.c    **** 
 307:Caterina.c    **** 				/* Read the line coding data in from the host into the global struct */
 308:Caterina.c    **** 				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 309:Caterina.c    **** 				Endpoint_ClearIN();
 310:Caterina.c    **** 			}
 311:Caterina.c    **** 
 312:Caterina.c    **** 			break;
 313:Caterina.c    **** 	}
 314:Caterina.c    **** }
 315:Caterina.c    **** 
 316:Caterina.c    **** #if !defined(NO_BLOCK_SUPPORT)
 317:Caterina.c    **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 318:Caterina.c    ****  *  on the AVR910 protocol command issued.
 319:Caterina.c    ****  *
 320:Caterina.c    ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 321:Caterina.c    ****  */
 322:Caterina.c    **** static void ReadWriteMemoryBlock(const uint8_t Command)
 323:Caterina.c    **** {
 324:Caterina.c    **** 	uint16_t BlockSize;
 325:Caterina.c    **** 	char     MemoryType;
 326:Caterina.c    **** 
 327:Caterina.c    **** 	bool     HighByte = false;
 328:Caterina.c    **** 	uint8_t  LowByte  = 0;
 329:Caterina.c    **** 
 330:Caterina.c    **** 	BlockSize  = (FetchNextCommandByte() << 8);
 331:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 332:Caterina.c    **** 
 333:Caterina.c    **** 	MemoryType =  FetchNextCommandByte();
 334:Caterina.c    **** 
 335:Caterina.c    **** 	if ((MemoryType != 'E') && (MemoryType != 'F'))
 336:Caterina.c    **** 	{
 337:Caterina.c    **** 		/* Send error byte back to the host */
 338:Caterina.c    **** 		WriteNextResponseByte('?');
 339:Caterina.c    **** 
 340:Caterina.c    **** 		return;
 341:Caterina.c    **** 	}
 342:Caterina.c    **** 
 343:Caterina.c    **** 	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
 344:Caterina.c    **** 	 * while doing SPM tasks */
 345:Caterina.c    **** 	TIMSK1 = 0;
 346:Caterina.c    **** 
 347:Caterina.c    **** 	/* Check if command is to read memory */
 348:Caterina.c    **** 	if (Command == 'g')
 349:Caterina.c    **** 	{
 350:Caterina.c    **** 		/* Re-enable RWW section */
 351:Caterina.c    **** 		boot_rww_enable();
 352:Caterina.c    **** 
 353:Caterina.c    **** 		while (BlockSize--)
 354:Caterina.c    **** 		{
 355:Caterina.c    **** 			if (MemoryType == 'F')
 356:Caterina.c    **** 			{
 357:Caterina.c    **** 				/* Read the next FLASH byte from the current FLASH page */
 358:Caterina.c    **** 				#if (FLASHEND > 0xFFFF)
 359:Caterina.c    **** 				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 360:Caterina.c    **** 				#else
 361:Caterina.c    **** 				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 362:Caterina.c    **** 				#endif
 363:Caterina.c    **** 
 364:Caterina.c    **** 				/* If both bytes in current word have been read, increment the address counter */
 365:Caterina.c    **** 				if (HighByte)
 366:Caterina.c    **** 				  CurrAddress += 2;
 367:Caterina.c    **** 
 368:Caterina.c    **** 				HighByte = !HighByte;
 369:Caterina.c    **** 			}
 370:Caterina.c    **** 			else
 371:Caterina.c    **** 			{
 372:Caterina.c    **** 				/* Read the next EEPROM byte into the endpoint */
 373:Caterina.c    **** 				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 374:Caterina.c    **** 
 375:Caterina.c    **** 				/* Increment the address counter after use */
 376:Caterina.c    **** 				CurrAddress += 2;
 377:Caterina.c    **** 			}
 378:Caterina.c    **** 		}
 379:Caterina.c    **** 	}
 380:Caterina.c    **** 	else
 381:Caterina.c    **** 	{
 382:Caterina.c    **** 		uint32_t PageStartAddress = CurrAddress;
 383:Caterina.c    **** 
 384:Caterina.c    **** 		if (MemoryType == 'F')
 385:Caterina.c    **** 		{
 386:Caterina.c    **** 			boot_page_erase(PageStartAddress);
 387:Caterina.c    **** 			boot_spm_busy_wait();
 388:Caterina.c    **** 		}
 389:Caterina.c    **** 
 390:Caterina.c    **** 		while (BlockSize--)
 391:Caterina.c    **** 		{
 392:Caterina.c    **** 			if (MemoryType == 'F')
 393:Caterina.c    **** 			{
 394:Caterina.c    **** 				/* If both bytes in current word have been written, increment the address counter */
 395:Caterina.c    **** 				if (HighByte)
 396:Caterina.c    **** 				{
 397:Caterina.c    **** 					/* Write the next FLASH word to the current FLASH page */
 398:Caterina.c    **** 					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 399:Caterina.c    **** 
 400:Caterina.c    **** 					/* Increment the address counter after use */
 401:Caterina.c    **** 					CurrAddress += 2;
 402:Caterina.c    **** 				}
 403:Caterina.c    **** 				else
 404:Caterina.c    **** 				{
 405:Caterina.c    **** 					LowByte = FetchNextCommandByte();
 406:Caterina.c    **** 				}
 407:Caterina.c    **** 
 408:Caterina.c    **** 				HighByte = !HighByte;
 409:Caterina.c    **** 			}
 410:Caterina.c    **** 			else
 411:Caterina.c    **** 			{
 412:Caterina.c    **** 				/* Write the next EEPROM byte from the endpoint */
 413:Caterina.c    **** 				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 414:Caterina.c    **** 
 415:Caterina.c    **** 				/* Increment the address counter after use */
 416:Caterina.c    **** 				CurrAddress += 2;
 417:Caterina.c    **** 			}
 418:Caterina.c    **** 		}
 419:Caterina.c    **** 
 420:Caterina.c    **** 		/* If in FLASH programming mode, commit the page after writing */
 421:Caterina.c    **** 		if (MemoryType == 'F')
 422:Caterina.c    **** 		{
 423:Caterina.c    **** 			/* Commit the flash page to memory */
 424:Caterina.c    **** 			boot_page_write(PageStartAddress);
 425:Caterina.c    **** 
 426:Caterina.c    **** 			/* Wait until write operation has completed */
 427:Caterina.c    **** 			boot_spm_busy_wait();
 428:Caterina.c    **** 		}
 429:Caterina.c    **** 
 430:Caterina.c    **** 		/* Send response byte back to the host */
 431:Caterina.c    **** 		WriteNextResponseByte('\r');
 432:Caterina.c    **** 	}
 433:Caterina.c    **** 
 434:Caterina.c    **** 	/* Re-enable timer 1 interrupt disabled earlier in this routine */
 435:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);
 436:Caterina.c    **** }
 437:Caterina.c    **** #endif
 438:Caterina.c    **** 
 439:Caterina.c    **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 440:Caterina.c    ****  *  to allow reception of the next data packet from the host.
 441:Caterina.c    ****  *
 442:Caterina.c    ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 443:Caterina.c    ****  */
 444:Caterina.c    **** static uint8_t FetchNextCommandByte(void)
 445:Caterina.c    **** {
  15               		.loc 1 445 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB86:
  23               	.LBB87:
  24               		.file 2 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 330 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE87:
  30               	.LBE86:
  31               	.LBB88:
  32               	.LBB89:
 331:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 420 0 discriminator 1
  34 0006 8091 E800 		lds r24,232
  35               	.LBE89:
  36               	.LBE88:
 446:Caterina.c    **** 	/* Select the OUT endpoint so that the next data byte can be read */
 447:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 448:Caterina.c    **** 
 449:Caterina.c    **** 	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
 450:Caterina.c    **** 	while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 450 0 discriminator 1
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L9
  40               	.LBB90:
  41               	.LBB91:
 421:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 531 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE91:
  48               	.LBE90:
  49               	.LBB92:
  50               	.LBB93:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
  51               		.loc 2 479 0 discriminator 1
  52 0018 8091 E800 		lds r24,232
  53               	.LBE93:
  54               	.LBE92:
 451:Caterina.c    **** 	{
 452:Caterina.c    **** 		Endpoint_ClearOUT();
 453:Caterina.c    **** 
 454:Caterina.c    **** 		while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 454 0 discriminator 1
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 455:Caterina.c    **** 		{
 456:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 456 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
 457:Caterina.c    **** 			  return 0;
  62               		.loc 1 457 0
  63 0026 80E0      		ldi r24,0
 458:Caterina.c    **** 		}
 459:Caterina.c    **** 	}
 460:Caterina.c    **** 
 461:Caterina.c    **** 	/* Fetch the next byte from the OUT endpoint */
 462:Caterina.c    **** 	return Endpoint_Read_8();
 463:Caterina.c    **** }
  64               		.loc 1 463 0
  65 0028 0895      		ret
  66               	.L9:
  67               	.LBB94:
  68               	.LBB95:
 532:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  69               		.loc 2 612 0
  70 002a 8091 F100 		lds r24,241
  71               	.LBE95:
  72               	.LBE94:
 462:Caterina.c    **** 	return Endpoint_Read_8();
  73               		.loc 1 462 0
  74 002e 0895      		ret
  75               		.cfi_endproc
  76               	.LFE104:
  78               		.section	.text.WriteNextResponseByte,"ax",@progbits
  80               	WriteNextResponseByte:
  81               	.LFB105:
 464:Caterina.c    **** 
 465:Caterina.c    **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 466:Caterina.c    ****  *  bank when full ready for the next byte in the packet to the host.
 467:Caterina.c    ****  *
 468:Caterina.c    ****  *  \param[in] Response  Next response byte to send to the host
 469:Caterina.c    ****  */
 470:Caterina.c    **** static void WriteNextResponseByte(const uint8_t Response)
 471:Caterina.c    **** {
  82               		.loc 1 471 0
  83               		.cfi_startproc
  84               	.LVL1:
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
  89               	.LBB96:
  90               	.LBB97:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  91               		.loc 2 330 0
  92 0000 93E0      		ldi r25,lo8(3)
  93 0002 9093 E900 		sts 233,r25
  94               	.LBE97:
  95               	.LBE96:
  96               	.LBB98:
  97               	.LBB99:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  98               		.loc 2 420 0
  99 0006 9091 E800 		lds r25,232
 100               	.LBE99:
 101               	.LBE98:
 472:Caterina.c    **** 	/* Select the IN endpoint so that the next data byte can be written */
 473:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 474:Caterina.c    **** 
 475:Caterina.c    **** 	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 476:Caterina.c    **** 	if (!(Endpoint_IsReadWriteAllowed()))
 102               		.loc 1 476 0
 103 000a 95FF      		sbrs r25,5
 104 000c 00C0      		rjmp .L11
 105               	.L15:
 106               	.LVL2:
 107               	.LBB100:
 108               	.LBB101:
 613:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 109               		.loc 2 624 0
 110 000e 8093 F100 		sts 241,r24
 111               	.LBE101:
 112               	.LBE100:
 477:Caterina.c    **** 	{
 478:Caterina.c    **** 		Endpoint_ClearIN();
 479:Caterina.c    **** 
 480:Caterina.c    **** 		while (!(Endpoint_IsINReady()))
 481:Caterina.c    **** 		{
 482:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 483:Caterina.c    **** 			  return;
 484:Caterina.c    **** 		}
 485:Caterina.c    **** 	}
 486:Caterina.c    **** 
 487:Caterina.c    **** 	/* Write the next byte to the IN endpoint */
 488:Caterina.c    **** 	Endpoint_Write_8(Response);
 489:Caterina.c    **** 
 490:Caterina.c    **** 	TX_LED_ON();
 113               		.loc 1 490 0
 114 0012 5D9A      		sbi 0xb,5
 491:Caterina.c    **** 	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 115               		.loc 1 491 0
 116 0014 84E6      		ldi r24,lo8(100)
 117 0016 90E0      		ldi r25,0
 118               	.LVL3:
 119 0018 9093 0000 		sts TxLEDPulse+1,r25
 120 001c 8093 0000 		sts TxLEDPulse,r24
 121               	.LVL4:
 122 0020 0895      		ret
 123               	.LVL5:
 124               	.L11:
 125               	.LBB102:
 126               	.LBB103:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 127               		.loc 2 516 0
 128 0022 9091 E800 		lds r25,232
 129 0026 9E77      		andi r25,lo8(126)
 130 0028 9093 E800 		sts 232,r25
 131               	.L13:
 132               	.LBE103:
 133               	.LBE102:
 134               	.LBB104:
 135               	.LBB105:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 136               		.loc 2 467 0 discriminator 1
 137 002c 9091 E800 		lds r25,232
 138               	.LBE105:
 139               	.LBE104:
 480:Caterina.c    **** 		while (!(Endpoint_IsINReady()))
 140               		.loc 1 480 0 discriminator 1
 141 0030 90FD      		sbrc r25,0
 142 0032 00C0      		rjmp .L15
 482:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 143               		.loc 1 482 0
 144 0034 9EB3      		in r25,0x1e
 145 0036 9111      		cpse r25,__zero_reg__
 146 0038 00C0      		rjmp .L13
 147 003a 0895      		ret
 148               		.cfi_endproc
 149               	.LFE105:
 151               		.section	.text.StartSketch,"ax",@progbits
 152               	.global	StartSketch
 154               	StartSketch:
 155               	.LFB95:
  71:Caterina.c    **** {
 156               		.loc 1 71 0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
  72:Caterina.c    **** 	cli();
 162               		.loc 1 72 0
 163               	/* #APP */
 164               	 ;  72 "Caterina.c" 1
 165 0000 F894      		cli
 166               	 ;  0 "" 2
  73:Caterina.c    **** 	PORTD = (0x00);
 167               		.loc 1 73 0
 168               	/* #NOAPP */
 169 0002 1BB8      		out 0xb,__zero_reg__
  75:Caterina.c    **** 	TIMSK1 = 0;
 170               		.loc 1 75 0
 171 0004 1092 6F00 		sts 111,__zero_reg__
  76:Caterina.c    **** 	TCCR1B = 0;
 172               		.loc 1 76 0
 173 0008 1092 8100 		sts 129,__zero_reg__
  77:Caterina.c    **** 	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 174               		.loc 1 77 0
 175 000c 1092 8500 		sts 133,__zero_reg__
  78:Caterina.c    **** 	TCNT1L = 0;
 176               		.loc 1 78 0
 177 0010 1092 8400 		sts 132,__zero_reg__
  81:Caterina.c    **** 	MCUCR = (1 << IVCE);
 178               		.loc 1 81 0
 179 0014 81E0      		ldi r24,lo8(1)
 180 0016 85BF      		out 0x35,r24
  82:Caterina.c    **** 	MCUCR = 0;
 181               		.loc 1 82 0
 182 0018 15BE      		out 0x35,__zero_reg__
  84:Caterina.c    **** 	L_LED_OFF();
 183               		.loc 1 84 0
 184 001a 4798      		cbi 0x8,7
  85:Caterina.c    **** 	TX_LED_OFF();
 185               		.loc 1 85 0
 186 001c 5D98      		cbi 0xb,5
  86:Caterina.c    **** 	RX_LED_OFF();
 187               		.loc 1 86 0
 188 001e 2898      		cbi 0x5,0
  90:Caterina.c    **** 	__asm__ volatile("jmp 0x0000");
 189               		.loc 1 90 0
 190               	/* #APP */
 191               	 ;  90 "Caterina.c" 1
 192 0020 0C94 0000 		jmp 0x0000
 193               	 ;  0 "" 2
 194               	/* #NOAPP */
 195 0024 0895      		ret
 196               		.cfi_endproc
 197               	.LFE95:
 199               		.section	.text.LEDPulse,"ax",@progbits
 200               	.global	LEDPulse
 202               	LEDPulse:
 203               	.LFB96:
  96:Caterina.c    **** {
 204               		.loc 1 96 0
 205               		.cfi_startproc
 206               	/* prologue: function */
 207               	/* frame size = 0 */
 208               	/* stack size = 0 */
 209               	.L__stack_usage = 0
  97:Caterina.c    **** 	LLEDPulse++;
 210               		.loc 1 97 0
 211 0000 8091 0000 		lds r24,LLEDPulse
 212 0004 9091 0000 		lds r25,LLEDPulse+1
 213 0008 0196      		adiw r24,1
 214 000a 9093 0000 		sts LLEDPulse+1,r25
 215 000e 8093 0000 		sts LLEDPulse,r24
  98:Caterina.c    **** 	uint8_t p = LLEDPulse >> 8;
 216               		.loc 1 98 0
 217 0012 292F      		mov r18,r25
 218               	.LVL6:
  99:Caterina.c    **** 	if (p > 127)
 219               		.loc 1 99 0
 220 0014 97FF      		sbrs r25,7
 221 0016 00C0      		rjmp .L21
 100:Caterina.c    **** 		p = 254-p;
 222               		.loc 1 100 0
 223 0018 2EEF      		ldi r18,lo8(-2)
 224 001a 291B      		sub r18,r25
 225               	.LVL7:
 226               	.L21:
 101:Caterina.c    **** 	p += p;
 227               		.loc 1 101 0
 228 001c 220F      		lsl r18
 229               	.LVL8:
 102:Caterina.c    **** 	if (((uint8_t)LLEDPulse) > p)
 230               		.loc 1 102 0
 231 001e 2817      		cp r18,r24
 232 0020 00F4      		brsh .L22
 103:Caterina.c    **** 		L_LED_OFF();
 233               		.loc 1 103 0
 234 0022 4798      		cbi 0x8,7
 235 0024 0895      		ret
 236               	.L22:
 105:Caterina.c    **** 		L_LED_ON();
 237               		.loc 1 105 0
 238 0026 479A      		sbi 0x8,7
 239 0028 0895      		ret
 240               		.cfi_endproc
 241               	.LFE96:
 243               		.section	.text.TURN_ON_NC,"ax",@progbits
 244               	.global	TURN_ON_NC
 246               	TURN_ON_NC:
 247               	.LFB97:
 110:Caterina.c    **** {
 248               		.loc 1 110 0
 249               		.cfi_startproc
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 0 */
 253               	.L__stack_usage = 0
 111:Caterina.c    ****   NC_LATCH_OFF();
 254               		.loc 1 111 0
 255 0000 5A98      		cbi 0xb,2
 112:Caterina.c    ****   NC_POW_ON();
 256               		.loc 1 112 0
 257 0002 5C9A      		sbi 0xb,4
 258               	.LVL9:
 259               	.LBB106:
 260               	.LBB107:
 261               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 262               		.loc 3 164 0
 263 0004 8FEB      		ldi r24,lo8(23999)
 264 0006 9DE5      		ldi r25,hi8(23999)
 265 0008 0197      		1: sbiw r24,1
 266 000a 01F4      		brne 1b
 267 000c 00C0      		rjmp .
 268 000e 0000      		nop
 269               	.LBE107:
 270               	.LBE106:
 114:Caterina.c    ****   NC_LATCH_ON();
 271               		.loc 1 114 0
 272 0010 5A9A      		sbi 0xb,2
 273               	.LVL10:
 274               	.LBB108:
 275               	.LBB109:
 276               		.loc 3 164 0
 277 0012 8FEB      		ldi r24,lo8(23999)
 278 0014 9DE5      		ldi r25,hi8(23999)
 279 0016 0197      		1: sbiw r24,1
 280 0018 01F4      		brne 1b
 281 001a 00C0      		rjmp .
 282 001c 0000      		nop
 283               	.LBE109:
 284               	.LBE108:
 116:Caterina.c    ****   NC_LATCH_OFF();
 285               		.loc 1 116 0
 286 001e 5A98      		cbi 0xb,2
 287 0020 0895      		ret
 288               		.cfi_endproc
 289               	.LFE97:
 291               		.section	.text.SetupHardware,"ax",@progbits
 292               	.global	SetupHardware
 294               	SetupHardware:
 295               	.LFB99:
 205:Caterina.c    **** {
 296               		.loc 1 205 0
 297               		.cfi_startproc
 298               	/* prologue: function */
 299               	/* frame size = 0 */
 300               	/* stack size = 0 */
 301               	.L__stack_usage = 0
 207:Caterina.c    **** 	MCUSR &= ~(1 << WDRF);
 302               		.loc 1 207 0
 303 0000 84B7      		in r24,0x34
 304 0002 877F      		andi r24,lo8(-9)
 305 0004 84BF      		out 0x34,r24
 208:Caterina.c    **** 	wdt_disable();
 306               		.loc 1 208 0
 307 0006 88E1      		ldi r24,lo8(24)
 308               	/* #APP */
 309               	 ;  208 "Caterina.c" 1
 310 0008 0FB6      		in __tmp_reg__, __SREG__
 311 000a F894      		cli
 312 000c 8093 6000 		sts 96, r24
 313 0010 1092 6000 		sts 96, __zero_reg__
 314 0014 0FBE      		out __SREG__,__tmp_reg__
 315               		
 316               	 ;  0 "" 2
 317               	.LVL11:
 318               	/* #NOAPP */
 319               	.LBB110:
 320               	.LBB111:
 321               		.file 4 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/avr/include/avr/power.h **** 
   4:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/avr/power.h **** 
   7:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/avr/include/avr/power.h ****      distribution.
  13:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/avr/include/avr/power.h **** 
  17:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/avr/include/avr/power.h **** 
  29:/usr/lib/avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/avr/include/avr/power.h **** 
  31:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/avr/include/avr/power.h **** 
  34:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/avr/include/avr/power.h **** 
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** /** \file */
  39:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/avr/include/avr/power.h **** 
  41:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/avr/include/avr/power.h **** 
  43:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/avr/include/avr/power.h **** 
  47:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/avr/include/avr/power.h **** 
  50:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/avr/include/avr/power.h **** 
  54:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/avr/include/avr/power.h **** 
  59:/usr/lib/avr/include/avr/power.h **** */
  60:/usr/lib/avr/include/avr/power.h **** 
  61:/usr/lib/avr/include/avr/power.h **** 
  62:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/avr/include/avr/power.h **** 
  64:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/avr/include/avr/power.h **** <small>
  66:/usr/lib/avr/include/avr/power.h **** <center>
  67:/usr/lib/avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/avr/include/avr/power.h ****   <tr>
  69:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/avr/include/avr/power.h ****   </tr>
  73:/usr/lib/avr/include/avr/power.h **** 
  74:/usr/lib/avr/include/avr/power.h ****   <tr>
  75:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/avr/include/avr/power.h ****   </tr>
  79:/usr/lib/avr/include/avr/power.h **** 
  80:/usr/lib/avr/include/avr/power.h ****   <tr>
  81:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/avr/include/avr/power.h ****   </tr>
  85:/usr/lib/avr/include/avr/power.h **** 
  86:/usr/lib/avr/include/avr/power.h ****   <tr>
  87:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/avr/include/avr/power.h ****   </tr>
  91:/usr/lib/avr/include/avr/power.h **** 
  92:/usr/lib/avr/include/avr/power.h ****   <tr>
  93:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/avr/include/avr/power.h ****   </tr>
  97:/usr/lib/avr/include/avr/power.h **** 
  98:/usr/lib/avr/include/avr/power.h ****   <tr>
  99:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/avr/include/avr/power.h ****   </tr>
 103:/usr/lib/avr/include/avr/power.h **** 
 104:/usr/lib/avr/include/avr/power.h ****   <tr>
 105:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/avr/include/avr/power.h ****   </tr>
 109:/usr/lib/avr/include/avr/power.h **** 
 110:/usr/lib/avr/include/avr/power.h ****   <tr>
 111:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/avr/include/avr/power.h ****   </tr>
 115:/usr/lib/avr/include/avr/power.h **** 
 116:/usr/lib/avr/include/avr/power.h ****   <tr>
 117:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/avr/include/avr/power.h ****   </tr>
 121:/usr/lib/avr/include/avr/power.h **** 
 122:/usr/lib/avr/include/avr/power.h ****   <tr>
 123:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/avr/include/avr/power.h ****   </tr>
 127:/usr/lib/avr/include/avr/power.h **** 
 128:/usr/lib/avr/include/avr/power.h ****   <tr>
 129:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/avr/include/avr/power.h ****   </tr>
 133:/usr/lib/avr/include/avr/power.h **** 
 134:/usr/lib/avr/include/avr/power.h ****   <tr>
 135:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/avr/include/avr/power.h ****   </tr>
 139:/usr/lib/avr/include/avr/power.h **** 
 140:/usr/lib/avr/include/avr/power.h ****   <tr>
 141:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/avr/include/avr/power.h ****   </tr>
 145:/usr/lib/avr/include/avr/power.h **** 
 146:/usr/lib/avr/include/avr/power.h ****   <tr>
 147:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/avr/include/avr/power.h ****   </tr>
 151:/usr/lib/avr/include/avr/power.h **** 
 152:/usr/lib/avr/include/avr/power.h ****   <tr>
 153:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/avr/include/avr/power.h ****   </tr>
 157:/usr/lib/avr/include/avr/power.h **** 
 158:/usr/lib/avr/include/avr/power.h ****   <tr>
 159:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/avr/include/avr/power.h ****   </tr>
 163:/usr/lib/avr/include/avr/power.h **** 
 164:/usr/lib/avr/include/avr/power.h ****   <tr>
 165:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/avr/include/avr/power.h ****   </tr>
 169:/usr/lib/avr/include/avr/power.h **** 
 170:/usr/lib/avr/include/avr/power.h ****   <tr>
 171:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/avr/include/avr/power.h ****   </tr>
 175:/usr/lib/avr/include/avr/power.h **** 
 176:/usr/lib/avr/include/avr/power.h ****   <tr>
 177:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/avr/include/avr/power.h ****   </tr>
 181:/usr/lib/avr/include/avr/power.h **** 
 182:/usr/lib/avr/include/avr/power.h ****   <tr>
 183:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/avr/include/avr/power.h ****   </tr>
 187:/usr/lib/avr/include/avr/power.h **** 
 188:/usr/lib/avr/include/avr/power.h ****   <tr>
 189:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/avr/include/avr/power.h ****   </tr>
 193:/usr/lib/avr/include/avr/power.h **** 
 194:/usr/lib/avr/include/avr/power.h ****   <tr>
 195:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/avr/include/avr/power.h ****   </tr>
 199:/usr/lib/avr/include/avr/power.h **** 
 200:/usr/lib/avr/include/avr/power.h ****   <tr>
 201:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/avr/include/avr/power.h ****   </tr>
 205:/usr/lib/avr/include/avr/power.h **** 
 206:/usr/lib/avr/include/avr/power.h ****   <tr>
 207:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/avr/include/avr/power.h ****   </tr>
 211:/usr/lib/avr/include/avr/power.h **** 
 212:/usr/lib/avr/include/avr/power.h ****   <tr>
 213:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/avr/include/avr/power.h ****   </tr>
 217:/usr/lib/avr/include/avr/power.h **** 
 218:/usr/lib/avr/include/avr/power.h ****   <tr>
 219:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/avr/include/avr/power.h ****   </tr>
 223:/usr/lib/avr/include/avr/power.h **** 
 224:/usr/lib/avr/include/avr/power.h ****   <tr>
 225:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/avr/include/avr/power.h ****   </tr>
 229:/usr/lib/avr/include/avr/power.h **** 
 230:/usr/lib/avr/include/avr/power.h ****   <tr>
 231:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/avr/include/avr/power.h ****   </tr>
 235:/usr/lib/avr/include/avr/power.h **** 
 236:/usr/lib/avr/include/avr/power.h ****   <tr>
 237:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/avr/include/avr/power.h ****   </tr>
 241:/usr/lib/avr/include/avr/power.h **** 
 242:/usr/lib/avr/include/avr/power.h ****   <tr>
 243:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/avr/include/avr/power.h ****   </tr>
 247:/usr/lib/avr/include/avr/power.h **** 
 248:/usr/lib/avr/include/avr/power.h ****   <tr>
 249:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/avr/include/avr/power.h ****   </tr>
 253:/usr/lib/avr/include/avr/power.h **** 
 254:/usr/lib/avr/include/avr/power.h ****   <tr>
 255:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/avr/include/avr/power.h ****   </tr>
 259:/usr/lib/avr/include/avr/power.h **** 
 260:/usr/lib/avr/include/avr/power.h ****   <tr>
 261:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/avr/include/avr/power.h ****   </tr>
 265:/usr/lib/avr/include/avr/power.h **** 
 266:/usr/lib/avr/include/avr/power.h ****   <tr>
 267:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/avr/include/avr/power.h ****   </tr>
 271:/usr/lib/avr/include/avr/power.h **** 
 272:/usr/lib/avr/include/avr/power.h ****   <tr>
 273:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/avr/include/avr/power.h ****   </tr>
 277:/usr/lib/avr/include/avr/power.h **** 
 278:/usr/lib/avr/include/avr/power.h ****   <tr>
 279:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/avr/include/avr/power.h ****   </tr>
 283:/usr/lib/avr/include/avr/power.h **** 
 284:/usr/lib/avr/include/avr/power.h ****   <tr>
 285:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/avr/include/avr/power.h ****   </tr>
 289:/usr/lib/avr/include/avr/power.h **** 
 290:/usr/lib/avr/include/avr/power.h ****   <tr>
 291:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/avr/include/avr/power.h ****   </tr>
 295:/usr/lib/avr/include/avr/power.h **** 
 296:/usr/lib/avr/include/avr/power.h ****   <tr>
 297:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/avr/include/avr/power.h ****   </tr>
 301:/usr/lib/avr/include/avr/power.h **** 
 302:/usr/lib/avr/include/avr/power.h ****   <tr>
 303:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/avr/include/avr/power.h ****   </tr>
 307:/usr/lib/avr/include/avr/power.h **** 
 308:/usr/lib/avr/include/avr/power.h ****   <tr>
 309:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/avr/include/avr/power.h ****   </tr>
 313:/usr/lib/avr/include/avr/power.h **** 
 314:/usr/lib/avr/include/avr/power.h ****   <tr>
 315:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/avr/include/avr/power.h ****   </tr>
 319:/usr/lib/avr/include/avr/power.h **** 
 320:/usr/lib/avr/include/avr/power.h ****   <tr>
 321:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/avr/include/avr/power.h ****   </tr>
 325:/usr/lib/avr/include/avr/power.h **** 
 326:/usr/lib/avr/include/avr/power.h ****   <tr>
 327:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/avr/include/avr/power.h ****   </tr>
 331:/usr/lib/avr/include/avr/power.h **** 
 332:/usr/lib/avr/include/avr/power.h ****   <tr>
 333:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/avr/include/avr/power.h ****   </tr>
 337:/usr/lib/avr/include/avr/power.h **** 
 338:/usr/lib/avr/include/avr/power.h ****   <tr>
 339:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/avr/include/avr/power.h ****   </tr>
 343:/usr/lib/avr/include/avr/power.h **** 
 344:/usr/lib/avr/include/avr/power.h ****   <tr>
 345:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/avr/include/avr/power.h ****   </tr>
 349:/usr/lib/avr/include/avr/power.h **** </table>
 350:/usr/lib/avr/include/avr/power.h **** </center>
 351:/usr/lib/avr/include/avr/power.h **** </small>
 352:/usr/lib/avr/include/avr/power.h **** 
 353:/usr/lib/avr/include/avr/power.h **** @} */
 354:/usr/lib/avr/include/avr/power.h **** 
 355:/usr/lib/avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/avr/include/avr/power.h **** 
 369:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/avr/include/avr/power.h **** 
 372:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/avr/include/avr/power.h **** 
 375:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/avr/include/avr/power.h **** 
 378:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/avr/include/avr/power.h **** 
 383:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/avr/include/avr/power.h **** 
 392:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/avr/include/avr/power.h **** do { \
 394:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/avr/include/avr/power.h **** } while(0)
 402:/usr/lib/avr/include/avr/power.h **** 
 403:/usr/lib/avr/include/avr/power.h **** 
 404:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/avr/include/avr/power.h **** do { \
 406:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/avr/include/avr/power.h **** } while(0)
 414:/usr/lib/avr/include/avr/power.h **** #endif
 415:/usr/lib/avr/include/avr/power.h **** 
 416:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/avr/include/avr/power.h **** 
 433:/usr/lib/avr/include/avr/power.h **** 
 434:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/avr/include/avr/power.h **** 
 437:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/avr/include/avr/power.h **** 
 440:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/avr/include/avr/power.h **** 
 445:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/avr/include/avr/power.h **** 
 450:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/avr/include/avr/power.h **** 
 459:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/avr/include/avr/power.h **** 
 468:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/avr/include/avr/power.h **** 
 477:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/avr/include/avr/power.h **** 
 486:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/avr/include/avr/power.h **** 
 495:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/avr/include/avr/power.h **** 
 504:/usr/lib/avr/include/avr/power.h **** #endif
 505:/usr/lib/avr/include/avr/power.h **** 
 506:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/avr/include/avr/power.h **** 
 512:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/avr/include/avr/power.h **** do { \
 514:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/avr/include/avr/power.h **** } while(0)
 522:/usr/lib/avr/include/avr/power.h **** 
 523:/usr/lib/avr/include/avr/power.h **** 
 524:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/avr/include/avr/power.h **** do { \
 526:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/avr/include/avr/power.h **** } while(0)
 534:/usr/lib/avr/include/avr/power.h **** 
 535:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/avr/include/avr/power.h **** 
 541:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/avr/include/avr/power.h **** 
 544:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/avr/include/avr/power.h **** 
 547:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/avr/include/avr/power.h **** 
 550:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/avr/include/avr/power.h **** 
 553:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/avr/include/avr/power.h **** 
 556:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/avr/include/avr/power.h **** 
 559:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/avr/include/avr/power.h **** 
 562:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/avr/include/avr/power.h **** 
 565:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/avr/include/avr/power.h **** 
 568:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/avr/include/avr/power.h **** 
 571:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/avr/include/avr/power.h **** 
 574:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/avr/include/avr/power.h **** 
 577:/usr/lib/avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/avr/include/avr/power.h **** 
 580:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/avr/include/avr/power.h **** do{ \
 582:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/avr/include/avr/power.h **** }while(0)
 585:/usr/lib/avr/include/avr/power.h **** 
 586:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/avr/include/avr/power.h **** do{ \
 588:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/avr/include/avr/power.h **** }while(0)
 591:/usr/lib/avr/include/avr/power.h **** 
 592:/usr/lib/avr/include/avr/power.h **** 
 593:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/avr/include/avr/power.h **** 
 595:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/avr/include/avr/power.h **** 
 598:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/avr/include/avr/power.h **** 
 601:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/avr/include/avr/power.h **** 
 604:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/avr/include/avr/power.h **** 
 607:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/avr/include/avr/power.h **** 
 610:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/avr/include/avr/power.h **** 
 613:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/avr/include/avr/power.h **** 
 616:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/avr/include/avr/power.h **** 
 619:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/avr/include/avr/power.h **** 
 622:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** 
 625:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/avr/include/avr/power.h **** 
 628:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/avr/include/avr/power.h **** do{ \
 630:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/avr/include/avr/power.h **** }while(0)
 633:/usr/lib/avr/include/avr/power.h **** 
 634:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/avr/include/avr/power.h **** do{ \
 636:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/avr/include/avr/power.h **** }while(0)
 639:/usr/lib/avr/include/avr/power.h **** 
 640:/usr/lib/avr/include/avr/power.h **** 
 641:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/avr/include/avr/power.h **** 
 646:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/avr/include/avr/power.h **** 
 649:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/avr/include/avr/power.h **** 
 652:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/avr/include/avr/power.h **** 
 655:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/avr/include/avr/power.h **** 
 658:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/avr/include/avr/power.h **** 
 661:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/avr/include/avr/power.h **** 
 664:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/avr/include/avr/power.h **** 
 667:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/avr/include/avr/power.h **** 
 670:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/avr/include/avr/power.h **** 
 673:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/avr/include/avr/power.h **** do{ \
 675:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/avr/include/avr/power.h **** }while(0)
 678:/usr/lib/avr/include/avr/power.h **** 
 679:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/avr/include/avr/power.h **** do{ \
 681:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/avr/include/avr/power.h **** }while(0)
 684:/usr/lib/avr/include/avr/power.h **** 
 685:/usr/lib/avr/include/avr/power.h **** 
 686:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/avr/include/avr/power.h **** 
 689:/usr/lib/avr/include/avr/power.h **** 
 690:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/avr/include/avr/power.h **** 
 693:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/avr/include/avr/power.h **** 
 696:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/avr/include/avr/power.h **** 
 699:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/avr/include/avr/power.h **** 
 702:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/avr/include/avr/power.h **** 
 705:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/avr/include/avr/power.h **** 
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/avr/include/avr/power.h **** 
 711:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/avr/include/avr/power.h **** 
 714:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/avr/include/avr/power.h **** 
 717:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/avr/include/avr/power.h **** 
 720:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/avr/include/avr/power.h **** do{ \
 722:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/avr/include/avr/power.h **** }while(0)
 725:/usr/lib/avr/include/avr/power.h **** 
 726:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/avr/include/avr/power.h **** do{ \
 728:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/avr/include/avr/power.h **** }while(0)
 731:/usr/lib/avr/include/avr/power.h **** 
 732:/usr/lib/avr/include/avr/power.h **** 
 733:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/avr/include/avr/power.h **** 
 735:/usr/lib/avr/include/avr/power.h **** 
 736:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/avr/include/avr/power.h **** 
 739:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/avr/include/avr/power.h **** 
 742:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/avr/include/avr/power.h **** 
 745:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/avr/include/avr/power.h **** 
 748:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/avr/include/avr/power.h **** 
 751:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/avr/include/avr/power.h **** 
 754:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/avr/include/avr/power.h **** 
 757:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/avr/include/avr/power.h **** 
 760:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/avr/include/avr/power.h **** 
 763:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/avr/include/avr/power.h **** do{ \
 765:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/avr/include/avr/power.h **** }while(0)
 768:/usr/lib/avr/include/avr/power.h **** 
 769:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/avr/include/avr/power.h **** do{ \
 771:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/avr/include/avr/power.h **** }while(0)
 774:/usr/lib/avr/include/avr/power.h **** 
 775:/usr/lib/avr/include/avr/power.h **** 
 776:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/avr/include/avr/power.h **** 
 778:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/avr/include/avr/power.h **** 
 781:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/avr/include/avr/power.h **** 
 784:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/avr/include/avr/power.h **** 
 787:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/avr/include/avr/power.h **** 
 790:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/avr/include/avr/power.h **** 
 794:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/avr/include/avr/power.h **** 
 798:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/avr/include/avr/power.h **** 
 802:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/avr/include/avr/power.h **** 
 805:/usr/lib/avr/include/avr/power.h **** 
 806:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/avr/include/avr/power.h **** 
 813:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/avr/include/avr/power.h **** 
 816:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/avr/include/avr/power.h **** 
 819:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/avr/include/avr/power.h **** 
 822:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/avr/include/avr/power.h **** 
 825:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/avr/include/avr/power.h **** 
 828:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/avr/include/avr/power.h **** 
 832:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/avr/include/avr/power.h **** 
 836:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/avr/include/avr/power.h **** 
 840:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/avr/include/avr/power.h **** 
 843:/usr/lib/avr/include/avr/power.h **** 
 844:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/avr/include/avr/power.h **** 
 846:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/avr/include/avr/power.h **** 
 849:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/avr/include/avr/power.h **** 
 852:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/avr/include/avr/power.h **** 
 855:/usr/lib/avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/avr/include/avr/power.h **** 
 859:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/avr/include/avr/power.h **** 
 863:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/avr/include/avr/power.h **** 
 866:/usr/lib/avr/include/avr/power.h **** 
 867:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/avr/include/avr/power.h **** 
 881:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/avr/include/avr/power.h **** 
 884:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/avr/include/avr/power.h **** 
 887:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/avr/include/avr/power.h **** 
 890:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/avr/include/avr/power.h **** 
 893:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/avr/include/avr/power.h **** 
 896:/usr/lib/avr/include/avr/power.h **** 
 897:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/avr/include/avr/power.h **** 
 915:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/avr/include/avr/power.h **** 
 918:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/avr/include/avr/power.h **** 
 921:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/avr/include/avr/power.h **** 
 924:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/avr/include/avr/power.h **** 
 927:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/avr/include/avr/power.h **** 
 930:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/avr/include/avr/power.h **** 
 933:/usr/lib/avr/include/avr/power.h **** 
 934:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/avr/include/avr/power.h **** 
 943:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/avr/include/avr/power.h **** 
 946:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/avr/include/avr/power.h **** 
 949:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/avr/include/avr/power.h **** 
 952:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/avr/include/avr/power.h **** 
 955:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/avr/include/avr/power.h **** 
 958:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/avr/include/avr/power.h **** 
 961:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/avr/include/avr/power.h **** 
 964:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/avr/include/avr/power.h **** 
 967:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/avr/include/avr/power.h **** 
 970:/usr/lib/avr/include/avr/power.h **** 
 971:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/avr/include/avr/power.h **** 
 973:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/avr/include/avr/power.h **** 
 976:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/avr/include/avr/power.h **** 
 979:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/avr/include/avr/power.h **** 
 982:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/avr/include/avr/power.h **** 
 985:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/avr/include/avr/power.h **** 
 988:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/avr/include/avr/power.h **** 
 991:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/avr/include/avr/power.h **** 
 994:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/avr/include/avr/power.h **** 
 997:/usr/lib/avr/include/avr/power.h **** 
 998:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/avr/include/avr/power.h **** 
1000:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/avr/include/avr/power.h **** 
1003:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/avr/include/avr/power.h **** 
1006:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/avr/include/avr/power.h **** 
1009:/usr/lib/avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/avr/include/avr/power.h **** 
1013:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/avr/include/avr/power.h **** 
1016:/usr/lib/avr/include/avr/power.h **** 
1017:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/avr/include/avr/power.h **** 
1032:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/avr/include/avr/power.h **** 
1035:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/avr/include/avr/power.h **** 
1038:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/avr/include/avr/power.h **** 
1041:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/avr/include/avr/power.h **** 
1044:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/avr/include/avr/power.h **** 
1047:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/avr/include/avr/power.h **** 
1050:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/avr/include/avr/power.h **** 
1053:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/avr/include/avr/power.h **** 
1056:/usr/lib/avr/include/avr/power.h **** 
1057:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/avr/include/avr/power.h **** 
1074:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/avr/include/avr/power.h **** 
1077:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/avr/include/avr/power.h **** 
1080:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/avr/include/avr/power.h **** 
1083:/usr/lib/avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/avr/include/avr/power.h **** 
1087:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/avr/include/avr/power.h **** 
1090:/usr/lib/avr/include/avr/power.h **** 
1091:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/avr/include/avr/power.h **** 
1093:/usr/lib/avr/include/avr/power.h **** 
1094:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/avr/include/avr/power.h **** 
1097:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/avr/include/avr/power.h **** 
1100:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/avr/include/avr/power.h **** 
1103:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/avr/include/avr/power.h **** 
1106:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/avr/include/avr/power.h **** 
1109:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/avr/include/avr/power.h **** 
1112:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/avr/include/avr/power.h **** 
1115:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/avr/include/avr/power.h **** 
1118:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/avr/include/avr/power.h **** 
1121:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/avr/include/avr/power.h **** do{ \
1123:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/avr/include/avr/power.h **** }while(0)
1126:/usr/lib/avr/include/avr/power.h **** 
1127:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/avr/include/avr/power.h **** do{ \
1129:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/avr/include/avr/power.h **** }while(0)
1132:/usr/lib/avr/include/avr/power.h **** 
1133:/usr/lib/avr/include/avr/power.h **** 
1134:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/avr/include/avr/power.h **** 
1139:/usr/lib/avr/include/avr/power.h **** 
1140:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/avr/include/avr/power.h **** 
1143:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/avr/include/avr/power.h **** 
1146:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/avr/include/avr/power.h **** 
1149:/usr/lib/avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/avr/include/avr/power.h **** 
1153:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/avr/include/avr/power.h **** 
1156:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/avr/include/avr/power.h **** 
1159:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/avr/include/avr/power.h **** 
1162:/usr/lib/avr/include/avr/power.h **** 
1163:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/avr/include/avr/power.h **** 
1169:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/avr/include/avr/power.h **** 
1172:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/avr/include/avr/power.h **** 
1175:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/avr/include/avr/power.h **** 
1178:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/avr/include/avr/power.h **** 
1181:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/avr/include/avr/power.h **** 
1184:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/avr/include/avr/power.h **** 
1190:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/avr/include/avr/power.h **** 
1193:/usr/lib/avr/include/avr/power.h **** 
1194:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/avr/include/avr/power.h **** 
1197:/usr/lib/avr/include/avr/power.h **** 
1198:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/avr/include/avr/power.h **** 
1201:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/avr/include/avr/power.h **** 
1204:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/avr/include/avr/power.h **** 
1207:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/avr/include/avr/power.h **** 
1210:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/avr/include/avr/power.h **** 
1213:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/avr/include/avr/power.h **** 
1216:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/avr/include/avr/power.h **** 
1219:/usr/lib/avr/include/avr/power.h **** 
1220:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/avr/include/avr/power.h **** 
1226:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/avr/include/avr/power.h **** 
1229:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/avr/include/avr/power.h **** 
1232:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/avr/include/avr/power.h **** 
1235:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/avr/include/avr/power.h **** 
1238:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/avr/include/avr/power.h **** 
1241:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/avr/include/avr/power.h **** do{ \
1243:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/avr/include/avr/power.h **** }while(0)
1246:/usr/lib/avr/include/avr/power.h **** 
1247:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/avr/include/avr/power.h **** do{ \
1249:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/avr/include/avr/power.h **** }while(0)
1252:/usr/lib/avr/include/avr/power.h **** 
1253:/usr/lib/avr/include/avr/power.h **** 
1254:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/avr/include/avr/power.h **** 
1256:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/avr/include/avr/power.h **** 
1259:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/avr/include/avr/power.h **** 
1262:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/avr/include/avr/power.h **** 
1265:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/avr/include/avr/power.h **** 
1268:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/avr/include/avr/power.h **** 
1271:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/avr/include/avr/power.h **** 
1274:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/avr/include/avr/power.h **** 
1277:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/avr/include/avr/power.h **** 
1280:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/avr/include/avr/power.h **** 
1283:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/avr/include/avr/power.h **** 
1286:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/avr/include/avr/power.h **** 
1289:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/avr/include/avr/power.h **** 
1292:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/avr/include/avr/power.h **** do{ \
1294:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/avr/include/avr/power.h **** }while(0)
1297:/usr/lib/avr/include/avr/power.h **** 
1298:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/avr/include/avr/power.h **** do{ \
1300:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/avr/include/avr/power.h **** }while(0)
1303:/usr/lib/avr/include/avr/power.h **** 
1304:/usr/lib/avr/include/avr/power.h **** 
1305:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/avr/include/avr/power.h **** 
1311:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/avr/include/avr/power.h **** 
1314:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/avr/include/avr/power.h **** 
1317:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/avr/include/avr/power.h **** 
1320:/usr/lib/avr/include/avr/power.h **** 
1321:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/avr/include/avr/power.h **** 
1324:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/avr/include/avr/power.h **** 
1327:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/avr/include/avr/power.h **** 
1330:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/avr/include/avr/power.h **** 
1333:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/avr/include/avr/power.h **** 
1336:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/avr/include/avr/power.h **** 
1339:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/avr/include/avr/power.h **** 
1342:/usr/lib/avr/include/avr/power.h **** #endif
1343:/usr/lib/avr/include/avr/power.h **** 
1344:/usr/lib/avr/include/avr/power.h **** 
1345:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/avr/include/avr/power.h **** 
1432:/usr/lib/avr/include/avr/power.h **** 
1433:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/avr/include/avr/power.h **** 
1435:/usr/lib/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/avr/include/avr/power.h **** 
1440:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/avr/include/avr/power.h **** */
1443:/usr/lib/avr/include/avr/power.h **** 
1444:/usr/lib/avr/include/avr/power.h **** 
1445:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/avr/include/avr/power.h **** \code 
1447:/usr/lib/avr/include/avr/power.h **** typedef enum
1448:/usr/lib/avr/include/avr/power.h **** {
1449:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/avr/include/avr/power.h **** \endcode
1461:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/avr/include/avr/power.h **** 
1463:/usr/lib/avr/include/avr/power.h **** */
1464:/usr/lib/avr/include/avr/power.h **** typedef enum
1465:/usr/lib/avr/include/avr/power.h **** {
1466:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/avr/include/avr/power.h **** #endif
1478:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/avr/include/avr/power.h **** 
1480:/usr/lib/avr/include/avr/power.h **** 
1481:/usr/lib/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/avr/include/avr/power.h **** 
1483:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/avr/include/avr/power.h **** 
1486:/usr/lib/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/avr/include/avr/power.h **** 
1490:/usr/lib/avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/avr/include/avr/power.h **** */
1492:/usr/lib/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/avr/include/avr/power.h **** {
1494:/usr/lib/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/avr/include/avr/power.h ****     __asm__ __volatile__ (
 322               		.loc 4 1495 0
 323 0016 90E0      		ldi r25,0
 324 0018 80E8      		ldi r24,lo8(-128)
 325               	/* #APP */
 326               	 ;  1495 "/usr/lib/avr/include/avr/power.h" 1
 327 001a 0FB6      		in __tmp_reg__,__SREG__
 328 001c F894      		cli
 329 001e 8093 6100 		sts 97, r24
 330 0022 9093 6100 		sts 97, r25
 331 0026 0FBE      		out __SREG__, __tmp_reg__
 332               	 ;  0 "" 2
 333               	/* #NOAPP */
 334               	.LBE111:
 335               	.LBE110:
 214:Caterina.c    **** 	MCUCR = (1 << IVCE);
 336               		.loc 1 214 0
 337 0028 81E0      		ldi r24,lo8(1)
 338 002a 85BF      		out 0x35,r24
 215:Caterina.c    **** 	MCUCR = (1 << IVSEL);
 339               		.loc 1 215 0
 340 002c 82E0      		ldi r24,lo8(2)
 341 002e 85BF      		out 0x35,r24
 217:Caterina.c    **** 	LED_SETUP();
 342               		.loc 1 217 0
 343 0030 3F9A      		sbi 0x7,7
 344 0032 209A      		sbi 0x4,0
 345 0034 559A      		sbi 0xa,5
 219:Caterina.c    **** 	CPU_PRESCALE(0);
 346               		.loc 1 219 0
 347 0036 E1E6      		ldi r30,lo8(97)
 348 0038 F0E0      		ldi r31,0
 349 003a 90E8      		ldi r25,lo8(-128)
 350 003c 9083      		st Z,r25
 351 003e 1082      		st Z,__zero_reg__
 220:Caterina.c    **** 	L_LED_OFF();
 352               		.loc 1 220 0
 353 0040 4798      		cbi 0x8,7
 221:Caterina.c    **** 	TX_LED_OFF();
 354               		.loc 1 221 0
 355 0042 5D98      		cbi 0xb,5
 222:Caterina.c    **** 	RX_LED_OFF();
 356               		.loc 1 222 0
 357 0044 2898      		cbi 0x5,0
 230:Caterina.c    **** 	OCR1AH = 0;
 358               		.loc 1 230 0
 359 0046 1092 8900 		sts 137,__zero_reg__
 231:Caterina.c    **** 	OCR1AL = 250;
 360               		.loc 1 231 0
 361 004a 9AEF      		ldi r25,lo8(-6)
 362 004c 9093 8800 		sts 136,r25
 232:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 363               		.loc 1 232 0
 364 0050 8093 6F00 		sts 111,r24
 233:Caterina.c    **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 365               		.loc 1 233 0
 366 0054 83E0      		ldi r24,lo8(3)
 367 0056 8093 8100 		sts 129,r24
 236:Caterina.c    **** 	USB_Init();
 368               		.loc 1 236 0
 369 005a 0C94 0000 		jmp USB_Init
 370               	.LVL12:
 371               		.cfi_endproc
 372               	.LFE99:
 374               		.section	.text.__vector_17,"ax",@progbits
 375               	.global	__vector_17
 377               	__vector_17:
 378               	.LFB100:
 241:Caterina.c    **** {
 379               		.loc 1 241 0
 380               		.cfi_startproc
 381 0000 1F92      		push r1
 382               	.LCFI0:
 383               		.cfi_def_cfa_offset 3
 384               		.cfi_offset 1, -2
 385 0002 0F92      		push r0
 386               	.LCFI1:
 387               		.cfi_def_cfa_offset 4
 388               		.cfi_offset 0, -3
 389 0004 0FB6      		in r0,__SREG__
 390 0006 0F92      		push r0
 391 0008 1124      		clr __zero_reg__
 392 000a 2F93      		push r18
 393               	.LCFI2:
 394               		.cfi_def_cfa_offset 5
 395               		.cfi_offset 18, -4
 396 000c 8F93      		push r24
 397               	.LCFI3:
 398               		.cfi_def_cfa_offset 6
 399               		.cfi_offset 24, -5
 400 000e 9F93      		push r25
 401               	.LCFI4:
 402               		.cfi_def_cfa_offset 7
 403               		.cfi_offset 25, -6
 404 0010 EF93      		push r30
 405               	.LCFI5:
 406               		.cfi_def_cfa_offset 8
 407               		.cfi_offset 30, -7
 408 0012 FF93      		push r31
 409               	.LCFI6:
 410               		.cfi_def_cfa_offset 9
 411               		.cfi_offset 31, -8
 412               	/* prologue: Signal */
 413               	/* frame size = 0 */
 414               	/* stack size = 8 */
 415               	.L__stack_usage = 8
 243:Caterina.c    **** 	TCNT1H = 0;
 416               		.loc 1 243 0
 417 0014 1092 8500 		sts 133,__zero_reg__
 244:Caterina.c    **** 	TCNT1L = 0;
 418               		.loc 1 244 0
 419 0018 1092 8400 		sts 132,__zero_reg__
 247:Caterina.c    **** 	if (TxLEDPulse && !(--TxLEDPulse))
 420               		.loc 1 247 0
 421 001c 8091 0000 		lds r24,TxLEDPulse
 422 0020 9091 0000 		lds r25,TxLEDPulse+1
 423 0024 0097      		sbiw r24,0
 424 0026 01F0      		breq .L28
 247:Caterina.c    **** 	if (TxLEDPulse && !(--TxLEDPulse))
 425               		.loc 1 247 0 is_stmt 0 discriminator 1
 426 0028 0197      		sbiw r24,1
 427 002a 9093 0000 		sts TxLEDPulse+1,r25
 428 002e 8093 0000 		sts TxLEDPulse,r24
 429 0032 892B      		or r24,r25
 430 0034 01F4      		brne .L28
 248:Caterina.c    **** 		TX_LED_OFF();
 431               		.loc 1 248 0 is_stmt 1
 432 0036 5D98      		cbi 0xb,5
 433               	.L28:
 249:Caterina.c    **** 	if (RxLEDPulse && !(--RxLEDPulse))
 434               		.loc 1 249 0
 435 0038 8091 0000 		lds r24,RxLEDPulse
 436 003c 9091 0000 		lds r25,RxLEDPulse+1
 437 0040 0097      		sbiw r24,0
 438 0042 01F0      		breq .L31
 249:Caterina.c    **** 	if (RxLEDPulse && !(--RxLEDPulse))
 439               		.loc 1 249 0 is_stmt 0 discriminator 1
 440 0044 0197      		sbiw r24,1
 441 0046 9093 0000 		sts RxLEDPulse+1,r25
 442 004a 8093 0000 		sts RxLEDPulse,r24
 443 004e 892B      		or r24,r25
 444 0050 01F4      		brne .L31
 250:Caterina.c    **** 		RX_LED_OFF();
 445               		.loc 1 250 0 is_stmt 1
 446 0052 2898      		cbi 0x5,0
 447               	.L31:
 448               	.LVL13:
 449               	.LBB112:
 252:Caterina.c    **** 	if (pgm_read_word(0) != 0xFFFF)
 450               		.loc 1 252 0
 451 0054 E0E0      		ldi r30,0
 452 0056 F0E0      		ldi r31,0
 453               	/* #APP */
 454               	 ;  252 "Caterina.c" 1
 455 0058 8591      		lpm r24, Z+
 456 005a 9491      		lpm r25, Z
 457               		
 458               	 ;  0 "" 2
 459               	.LVL14:
 460               	/* #NOAPP */
 461               	.LBE112:
 462 005c 0196      		adiw r24,1
 463 005e 01F0      		breq .L26
 253:Caterina.c    **** 		Timeout++;
 464               		.loc 1 253 0
 465 0060 8091 0000 		lds r24,Timeout
 466 0064 9091 0000 		lds r25,Timeout+1
 467               	.LVL15:
 468 0068 0196      		adiw r24,1
 469 006a 9093 0000 		sts Timeout+1,r25
 470 006e 8093 0000 		sts Timeout,r24
 471               	.L26:
 472               	/* epilogue start */
 254:Caterina.c    **** }
 473               		.loc 1 254 0
 474 0072 FF91      		pop r31
 475 0074 EF91      		pop r30
 476 0076 9F91      		pop r25
 477 0078 8F91      		pop r24
 478 007a 2F91      		pop r18
 479 007c 0F90      		pop r0
 480 007e 0FBE      		out __SREG__,r0
 481 0080 0F90      		pop r0
 482 0082 1F90      		pop r1
 483 0084 1895      		reti
 484               		.cfi_endproc
 485               	.LFE100:
 487               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 488               	.global	EVENT_USB_Device_ConfigurationChanged
 490               	EVENT_USB_Device_ConfigurationChanged:
 491               	.LFB101:
 260:Caterina.c    **** {
 492               		.loc 1 260 0
 493               		.cfi_startproc
 494               	/* prologue: function */
 495               	/* frame size = 0 */
 496               	/* stack size = 0 */
 497               	.L__stack_usage = 0
 498               	.LVL16:
 499               	.LBB113:
 500               	.LBB114:
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 501               		.loc 2 276 0
 502 0000 42E0      		ldi r20,lo8(2)
 503 0002 61EC      		ldi r22,lo8(-63)
 504 0004 82E0      		ldi r24,lo8(2)
 505 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 506               	.LVL17:
 507               	.LBE114:
 508               	.LBE113:
 509               	.LBB115:
 510               	.LBB116:
 511 000a 42E1      		ldi r20,lo8(18)
 512 000c 61E8      		ldi r22,lo8(-127)
 513 000e 83E0      		ldi r24,lo8(3)
 514 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 515               	.LVL18:
 516               	.LBE116:
 517               	.LBE115:
 518               	.LBB117:
 519               	.LBB118:
 520 0014 42E1      		ldi r20,lo8(18)
 521 0016 60E8      		ldi r22,lo8(-128)
 522 0018 84E0      		ldi r24,lo8(4)
 523 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 524               	.LVL19:
 525               	.LBE118:
 526               	.LBE117:
 527               		.cfi_endproc
 528               	.LFE101:
 530               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 531               	.global	EVENT_USB_Device_ControlRequest
 533               	EVENT_USB_Device_ControlRequest:
 534               	.LFB102:
 280:Caterina.c    **** {
 535               		.loc 1 280 0
 536               		.cfi_startproc
 537               	/* prologue: function */
 538               	/* frame size = 0 */
 539               	/* stack size = 0 */
 540               	.L__stack_usage = 0
 282:Caterina.c    **** 	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 541               		.loc 1 282 0
 542 0000 8091 0000 		lds r24,USB_ControlRequest
 543 0004 982F      		mov r25,r24
 544 0006 9F77      		andi r25,lo8(127)
 545 0008 9132      		cpi r25,lo8(33)
 546 000a 01F4      		brne .L38
 289:Caterina.c    **** 	switch (USB_ControlRequest.bRequest)
 547               		.loc 1 289 0
 548 000c 9091 0000 		lds r25,USB_ControlRequest+1
 549 0010 9032      		cpi r25,lo8(32)
 550 0012 01F0      		breq .L40
 551 0014 9132      		cpi r25,lo8(33)
 552 0016 01F4      		brne .L38
 292:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 553               		.loc 1 292 0
 554 0018 813A      		cpi r24,lo8(-95)
 555 001a 01F4      		brne .L38
 556               	.LBB119:
 557               	.LBB120:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 558               		.loc 2 504 0
 559 001c 8091 E800 		lds r24,232
 560 0020 877F      		andi r24,lo8(-9)
 561 0022 8093 E800 		sts 232,r24
 562               	.LBE120:
 563               	.LBE119:
 297:Caterina.c    **** 				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 564               		.loc 1 297 0
 565 0026 67E0      		ldi r22,lo8(7)
 566 0028 70E0      		ldi r23,0
 567 002a 80E0      		ldi r24,lo8(LineEncoding)
 568 002c 90E0      		ldi r25,hi8(LineEncoding)
 569 002e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 570               	.LVL20:
 571               	.LBB121:
 572               	.LBB122:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 573               		.loc 2 531 0
 574 0032 8091 E800 		lds r24,232
 575 0036 8B77      		andi r24,lo8(123)
 576 0038 00C0      		rjmp .L42
 577               	.L40:
 578               	.LBE122:
 579               	.LBE121:
 303:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 580               		.loc 1 303 0
 581 003a 8132      		cpi r24,lo8(33)
 582 003c 01F4      		brne .L38
 583               	.LBB123:
 584               	.LBB124:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 585               		.loc 2 504 0
 586 003e 8091 E800 		lds r24,232
 587 0042 877F      		andi r24,lo8(-9)
 588 0044 8093 E800 		sts 232,r24
 589               	.LBE124:
 590               	.LBE123:
 308:Caterina.c    **** 				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 591               		.loc 1 308 0
 592 0048 67E0      		ldi r22,lo8(7)
 593 004a 70E0      		ldi r23,0
 594 004c 80E0      		ldi r24,lo8(LineEncoding)
 595 004e 90E0      		ldi r25,hi8(LineEncoding)
 596 0050 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 597               	.LVL21:
 598               	.LBB125:
 599               	.LBB126:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 600               		.loc 2 516 0
 601 0054 8091 E800 		lds r24,232
 602 0058 8E77      		andi r24,lo8(126)
 603               	.L42:
 604 005a 8093 E800 		sts 232,r24
 605               	.L38:
 606 005e 0895      		ret
 607               	.LBE126:
 608               	.LBE125:
 609               		.cfi_endproc
 610               	.LFE102:
 612               		.section	.rodata.str1.1,"aMS",@progbits,1
 613               	.LC0:
 614 0000 4341 5445 		.string	"CATERINA"
 614      5249 4E41 
 614      00
 615               		.section	.text.CDC_Task,"ax",@progbits
 616               	.global	CDC_Task
 618               	CDC_Task:
 619               	.LFB106:
 492:Caterina.c    **** }
 493:Caterina.c    **** 
 494:Caterina.c    **** #define STK_OK              0x10
 495:Caterina.c    **** #define STK_INSYNC          0x14  // ' '
 496:Caterina.c    **** #define CRC_EOP             0x20  // 'SPACE'
 497:Caterina.c    **** #define STK_GET_SYNC        0x30  // '0'
 498:Caterina.c    **** 
 499:Caterina.c    **** #define STK_GET_PARAMETER   0x41  // 'A'
 500:Caterina.c    **** #define STK_SET_DEVICE      0x42  // 'B'
 501:Caterina.c    **** #define STK_SET_DEVICE_EXT  0x45  // 'E'
 502:Caterina.c    **** #define STK_LOAD_ADDRESS    0x55  // 'U'
 503:Caterina.c    **** #define STK_UNIVERSAL       0x56  // 'V'
 504:Caterina.c    **** #define STK_PROG_PAGE       0x64  // 'd'
 505:Caterina.c    **** #define STK_READ_PAGE       0x74  // 't'
 506:Caterina.c    **** #define STK_READ_SIGN       0x75  // 'u'
 507:Caterina.c    **** 
 508:Caterina.c    **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 509:Caterina.c    ****  *  and send the appropriate response back to the host.
 510:Caterina.c    ****  */
 511:Caterina.c    **** void CDC_Task(void)
 512:Caterina.c    **** {
 620               		.loc 1 512 0
 621               		.cfi_startproc
 622 0000 4F92      		push r4
 623               	.LCFI7:
 624               		.cfi_def_cfa_offset 3
 625               		.cfi_offset 4, -2
 626 0002 5F92      		push r5
 627               	.LCFI8:
 628               		.cfi_def_cfa_offset 4
 629               		.cfi_offset 5, -3
 630 0004 6F92      		push r6
 631               	.LCFI9:
 632               		.cfi_def_cfa_offset 5
 633               		.cfi_offset 6, -4
 634 0006 7F92      		push r7
 635               	.LCFI10:
 636               		.cfi_def_cfa_offset 6
 637               		.cfi_offset 7, -5
 638 0008 8F92      		push r8
 639               	.LCFI11:
 640               		.cfi_def_cfa_offset 7
 641               		.cfi_offset 8, -6
 642 000a 9F92      		push r9
 643               	.LCFI12:
 644               		.cfi_def_cfa_offset 8
 645               		.cfi_offset 9, -7
 646 000c AF92      		push r10
 647               	.LCFI13:
 648               		.cfi_def_cfa_offset 9
 649               		.cfi_offset 10, -8
 650 000e BF92      		push r11
 651               	.LCFI14:
 652               		.cfi_def_cfa_offset 10
 653               		.cfi_offset 11, -9
 654 0010 CF92      		push r12
 655               	.LCFI15:
 656               		.cfi_def_cfa_offset 11
 657               		.cfi_offset 12, -10
 658 0012 DF92      		push r13
 659               	.LCFI16:
 660               		.cfi_def_cfa_offset 12
 661               		.cfi_offset 13, -11
 662 0014 EF92      		push r14
 663               	.LCFI17:
 664               		.cfi_def_cfa_offset 13
 665               		.cfi_offset 14, -12
 666 0016 FF92      		push r15
 667               	.LCFI18:
 668               		.cfi_def_cfa_offset 14
 669               		.cfi_offset 15, -13
 670 0018 CF93      		push r28
 671               	.LCFI19:
 672               		.cfi_def_cfa_offset 15
 673               		.cfi_offset 28, -14
 674 001a DF93      		push r29
 675               	.LCFI20:
 676               		.cfi_def_cfa_offset 16
 677               		.cfi_offset 29, -15
 678               	/* prologue: function */
 679               	/* frame size = 0 */
 680               	/* stack size = 14 */
 681               	.L__stack_usage = 14
 682               	.LVL22:
 683               	.LBB159:
 684               	.LBB160:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 685               		.loc 2 330 0
 686 001c 84E0      		ldi r24,lo8(4)
 687 001e 8093 E900 		sts 233,r24
 688               	.LBE160:
 689               	.LBE159:
 690               	.LBB161:
 691               	.LBB162:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 692               		.loc 2 479 0
 693 0022 8091 E800 		lds r24,232
 694               	.LBE162:
 695               	.LBE161:
 513:Caterina.c    **** 	/* Select the OUT endpoint */
 514:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 515:Caterina.c    **** 
 516:Caterina.c    **** 	/* Check if endpoint has a command in it sent from the host */
 517:Caterina.c    **** 	if (!(Endpoint_IsOUTReceived()))
 696               		.loc 1 517 0
 697 0026 82FF      		sbrs r24,2
 698 0028 00C0      		rjmp .L43
 518:Caterina.c    **** 	  return;
 519:Caterina.c    **** 
 520:Caterina.c    **** 	RX_LED_ON();
 699               		.loc 1 520 0
 700 002a 289A      		sbi 0x5,0
 521:Caterina.c    **** 	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 701               		.loc 1 521 0
 702 002c 84E6      		ldi r24,lo8(100)
 703 002e 90E0      		ldi r25,0
 704 0030 9093 0000 		sts RxLEDPulse+1,r25
 705 0034 8093 0000 		sts RxLEDPulse,r24
 522:Caterina.c    **** 
 523:Caterina.c    **** 	/* Read in the bootloader command (first byte sent from host) */
 524:Caterina.c    **** 	uint8_t Command = FetchNextCommandByte();
 706               		.loc 1 524 0
 707 0038 0E94 0000 		call FetchNextCommandByte
 708               	.LVL23:
 709 003c D82F      		mov r29,r24
 710               	.LVL24:
 525:Caterina.c    **** 
 526:Caterina.c    **** 	if (Command == 'E')
 711               		.loc 1 526 0
 712 003e 8534      		cpi r24,lo8(69)
 713 0040 01F4      		brne .L46
 527:Caterina.c    **** 	{
 528:Caterina.c    **** 		/* We nearly run out the bootloader timeout clock,
 529:Caterina.c    **** 		* leaving just a few hundred milliseconds so the
 530:Caterina.c    **** 		* bootloder has time to respond and service any
 531:Caterina.c    **** 		* subsequent requests */
 532:Caterina.c    **** 		Timeout = TIMEOUT_PERIOD - 500;
 714               		.loc 1 532 0
 715 0042 8CE4      		ldi r24,lo8(76)
 716 0044 9DE1      		ldi r25,lo8(29)
 717               	.LVL25:
 718 0046 9093 0000 		sts Timeout+1,r25
 719 004a 8093 0000 		sts Timeout,r24
 720               	.L48:
 533:Caterina.c    **** 
 534:Caterina.c    **** 		/* Re-enable RWW section - must be done here in case
 535:Caterina.c    **** 		 * user has disabled verification on upload.  */
 536:Caterina.c    **** 		boot_rww_enable_safe();
 721               		.loc 1 536 0 discriminator 1
 722 004e 07B6      		in __tmp_reg__,0x37
 723 0050 00FC      		sbrc __tmp_reg__,0
 724 0052 00C0      		rjmp .L48
 725               	.L50:
 726               		.loc 1 536 0 is_stmt 0
 727 0054 F999      		sbic 0x1f,1
 728 0056 00C0      		rjmp .L50
 729               		.loc 1 536 0 discriminator 3
 730 0058 81E1      		ldi r24,lo8(17)
 731               	/* #APP */
 732               	 ;  536 "Caterina.c" 1
 733 005a 8093 5700 		sts 87, r24
 734 005e E895      		spm
 735               		
 736               	 ;  0 "" 2
 737               	/* #NOAPP */
 738 0060 00C0      		rjmp .L139
 739               	.LVL26:
 740               	.L46:
 537:Caterina.c    **** 
 538:Caterina.c    **** 		// Send confirmation byte back to the host
 539:Caterina.c    **** 		WriteNextResponseByte('\r');
 540:Caterina.c    **** 	}
 541:Caterina.c    **** 	else if (Command == 'T')
 741               		.loc 1 541 0 is_stmt 1
 742 0062 8435      		cpi r24,lo8(84)
 743 0064 01F4      		brne .L52
 542:Caterina.c    **** 	{
 543:Caterina.c    **** 		FetchNextCommandByte();
 744               		.loc 1 543 0
 745 0066 0E94 0000 		call FetchNextCommandByte
 746               	.LVL27:
 747               	.L139:
 544:Caterina.c    **** 
 545:Caterina.c    **** 		// Send confirmation byte back to the host
 546:Caterina.c    **** 		WriteNextResponseByte('\r');
 748               		.loc 1 546 0
 749 006a 8DE0      		ldi r24,lo8(13)
 750               	.L140:
 751 006c 0E94 0000 		call WriteNextResponseByte
 752               	.LVL28:
 753 0070 00C0      		rjmp .L51
 754               	.LVL29:
 755               	.L52:
 547:Caterina.c    **** 	}
 548:Caterina.c    **** 	else if ((Command == 'L') || (Command == 'P'))
 756               		.loc 1 548 0
 757 0072 8C34      		cpi r24,lo8(76)
 758 0074 01F0      		breq .L139
 759               		.loc 1 548 0 is_stmt 0 discriminator 1
 760 0076 8035      		cpi r24,lo8(80)
 761 0078 01F0      		breq .L139
 549:Caterina.c    **** 	{
 550:Caterina.c    **** 		// Send confirmation byte back to the host
 551:Caterina.c    **** 		WriteNextResponseByte('\r');
 552:Caterina.c    **** 	}
 553:Caterina.c    **** 	else if (Command == 't')
 762               		.loc 1 553 0 is_stmt 1
 763 007a 8437      		cpi r24,lo8(116)
 764 007c 01F4      		brne .L55
 554:Caterina.c    **** 	{
 555:Caterina.c    **** 		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader
 556:Caterina.c    **** 		WriteNextResponseByte(0x44);
 765               		.loc 1 556 0
 766 007e 84E4      		ldi r24,lo8(68)
 767               	.LVL30:
 768 0080 0E94 0000 		call WriteNextResponseByte
 769               	.LVL31:
 557:Caterina.c    **** 		WriteNextResponseByte(0x00);
 770               		.loc 1 557 0
 771 0084 80E0      		ldi r24,0
 772 0086 00C0      		rjmp .L140
 773               	.LVL32:
 774               	.L55:
 558:Caterina.c    **** 	}
 559:Caterina.c    **** 	else if (Command == 'a')
 775               		.loc 1 559 0
 776 0088 8136      		cpi r24,lo8(97)
 777 008a 01F4      		brne .L56
 560:Caterina.c    **** 	{
 561:Caterina.c    **** 		// Indicate auto-address increment is supported
 562:Caterina.c    **** 		WriteNextResponseByte('Y');
 778               		.loc 1 562 0
 779 008c 89E5      		ldi r24,lo8(89)
 780               	.LVL33:
 781 008e 00C0      		rjmp .L140
 782               	.LVL34:
 783               	.L56:
 563:Caterina.c    **** 	}
 564:Caterina.c    **** 	else if (Command == 'A')
 784               		.loc 1 564 0
 785 0090 8134      		cpi r24,lo8(65)
 786 0092 01F4      		brne .L57
 565:Caterina.c    **** 	{
 566:Caterina.c    **** 		// Set the current address to that given by the host
 567:Caterina.c    **** 		CurrAddress   = (FetchNextCommandByte() << 9);
 787               		.loc 1 567 0
 788 0094 0E94 0000 		call FetchNextCommandByte
 789               	.LVL35:
 790 0098 C82F      		mov r28,r24
 568:Caterina.c    **** 		CurrAddress  |= (FetchNextCommandByte() << 1);
 791               		.loc 1 568 0
 792 009a 0E94 0000 		call FetchNextCommandByte
 793               	.LVL36:
 794 009e 90E0      		ldi r25,0
 795 00a0 880F      		lsl r24
 796 00a2 991F      		rol r25
 567:Caterina.c    **** 		CurrAddress   = (FetchNextCommandByte() << 9);
 797               		.loc 1 567 0
 798 00a4 2C2F      		mov r18,r28
 799 00a6 30E0      		ldi r19,0
 800 00a8 322F      		mov r19,r18
 801 00aa 2227      		clr r18
 802 00ac 330F      		lsl r19
 803               		.loc 1 568 0
 804 00ae 822B      		or r24,r18
 805 00b0 932B      		or r25,r19
 806 00b2 AA27      		clr r26
 807 00b4 97FD      		sbrc r25,7
 808 00b6 A095      		com r26
 809 00b8 BA2F      		mov r27,r26
 810 00ba 00C0      		rjmp .L141
 811               	.LVL37:
 812               	.L57:
 569:Caterina.c    **** 
 570:Caterina.c    **** 		// Send confirmation byte back to the host
 571:Caterina.c    **** 		WriteNextResponseByte('\r');
 572:Caterina.c    **** 	}
 573:Caterina.c    **** 	else if (Command == 'p')
 813               		.loc 1 573 0
 814 00bc 8037      		cpi r24,lo8(112)
 815 00be 01F4      		brne .L58
 574:Caterina.c    **** 	{
 575:Caterina.c    **** 		// Indicate serial programmer back to the host
 576:Caterina.c    **** 		WriteNextResponseByte('S');
 816               		.loc 1 576 0
 817 00c0 83E5      		ldi r24,lo8(83)
 818               	.LVL38:
 819 00c2 00C0      		rjmp .L140
 820               	.LVL39:
 821               	.L58:
 577:Caterina.c    **** 	}
 578:Caterina.c    **** 	else if (Command == 'S')
 822               		.loc 1 578 0
 823 00c4 8335      		cpi r24,lo8(83)
 824 00c6 01F4      		brne .L59
 825 00c8 C0E0      		ldi r28,lo8(.LC0)
 826 00ca D0E0      		ldi r29,hi8(.LC0)
 827               	.LVL40:
 828               	.L61:
 829               	.LBB163:
 579:Caterina.c    **** 	{
 580:Caterina.c    **** 		// Write the 7-byte software identifier to the endpoint
 581:Caterina.c    **** 		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 582:Caterina.c    **** 		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 830               		.loc 1 582 0 discriminator 2
 831 00cc 8991      		ld r24,Y+
 832               	.LVL41:
 833 00ce 0E94 0000 		call WriteNextResponseByte
 834               	.LVL42:
 581:Caterina.c    **** 		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 835               		.loc 1 581 0 discriminator 2
 836 00d2 20E0      		ldi r18,hi8(.LC0+7)
 837 00d4 C030      		cpi r28,lo8(.LC0+7)
 838 00d6 D207      		cpc r29,r18
 839 00d8 01F4      		brne .L61
 840 00da 00C0      		rjmp .L51
 841               	.LVL43:
 842               	.L59:
 843               	.LBE163:
 583:Caterina.c    **** 	}
 584:Caterina.c    **** 	else if (Command == 'V')
 844               		.loc 1 584 0
 845 00dc 8635      		cpi r24,lo8(86)
 846 00de 01F4      		brne .L62
 585:Caterina.c    **** 	{
 586:Caterina.c    **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 847               		.loc 1 586 0
 848 00e0 81E3      		ldi r24,lo8(49)
 849               	.LVL44:
 850 00e2 0E94 0000 		call WriteNextResponseByte
 851               	.LVL45:
 587:Caterina.c    **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 852               		.loc 1 587 0
 853 00e6 80E3      		ldi r24,lo8(48)
 854 00e8 00C0      		rjmp .L140
 855               	.LVL46:
 856               	.L62:
 588:Caterina.c    **** 	}
 589:Caterina.c    **** 	else if (Command == 's')
 857               		.loc 1 589 0
 858 00ea 8337      		cpi r24,lo8(115)
 859 00ec 01F4      		brne .L63
 590:Caterina.c    **** 	{
 591:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_3);
 860               		.loc 1 591 0
 861 00ee 87E8      		ldi r24,lo8(-121)
 862               	.LVL47:
 863 00f0 0E94 0000 		call WriteNextResponseByte
 864               	.LVL48:
 592:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_2);
 865               		.loc 1 592 0
 866 00f4 85E9      		ldi r24,lo8(-107)
 867 00f6 0E94 0000 		call WriteNextResponseByte
 868               	.LVL49:
 593:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_1);
 869               		.loc 1 593 0
 870 00fa 8EE1      		ldi r24,lo8(30)
 871 00fc 00C0      		rjmp .L140
 872               	.LVL50:
 873               	.L63:
 594:Caterina.c    **** 	}
 595:Caterina.c    **** 	else if (Command == 'e')
 874               		.loc 1 595 0
 875 00fe 8536      		cpi r24,lo8(101)
 876 0100 01F4      		brne .L64
 877 0102 E0E0      		ldi r30,0
 878 0104 F0E0      		ldi r31,0
 879               	.LBB164:
 596:Caterina.c    **** 	{
 597:Caterina.c    **** 		// Clear the application section of flash
 598:Caterina.c    **** 		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_P
 599:Caterina.c    **** 		{
 600:Caterina.c    **** 			boot_page_erase(CurrFlashAddress);
 880               		.loc 1 600 0
 881 0106 83E0      		ldi r24,lo8(3)
 882               	.LVL51:
 601:Caterina.c    **** 			boot_spm_busy_wait();
 602:Caterina.c    **** 			boot_page_write(CurrFlashAddress);
 883               		.loc 1 602 0
 884 0108 95E0      		ldi r25,lo8(5)
 885               	.L69:
 600:Caterina.c    **** 			boot_page_erase(CurrFlashAddress);
 886               		.loc 1 600 0
 887               	/* #APP */
 888               	 ;  600 "Caterina.c" 1
 889 010a 8093 5700 		sts 87, r24
 890 010e E895      		spm
 891               		
 892               	 ;  0 "" 2
 893               	/* #NOAPP */
 894               	.L66:
 601:Caterina.c    **** 			boot_spm_busy_wait();
 895               		.loc 1 601 0 discriminator 1
 896 0110 07B6      		in __tmp_reg__,0x37
 897 0112 00FC      		sbrc __tmp_reg__,0
 898 0114 00C0      		rjmp .L66
 899               		.loc 1 602 0
 900               	/* #APP */
 901               	 ;  602 "Caterina.c" 1
 902 0116 9093 5700 		sts 87, r25
 903 011a E895      		spm
 904               		
 905               	 ;  0 "" 2
 906               	/* #NOAPP */
 907               	.L68:
 603:Caterina.c    **** 			boot_spm_busy_wait();
 908               		.loc 1 603 0 discriminator 1
 909 011c 07B6      		in __tmp_reg__,0x37
 910 011e 00FC      		sbrc __tmp_reg__,0
 911 0120 00C0      		rjmp .L68
 912               	.LVL52:
 913 0122 E058      		subi r30,-128
 914 0124 FF4F      		sbci r31,-1
 598:Caterina.c    **** 		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_P
 915               		.loc 1 598 0
 916 0126 E115      		cp r30,__zero_reg__
 917 0128 20E7      		ldi r18,112
 918 012a F207      		cpc r31,r18
 919 012c 01F4      		brne .L69
 920 012e 00C0      		rjmp .L139
 921               	.LVL53:
 922               	.L64:
 923               	.LBE164:
 604:Caterina.c    **** 		}
 605:Caterina.c    **** 
 606:Caterina.c    **** 		// Send confirmation byte back to the host
 607:Caterina.c    **** 		WriteNextResponseByte('\r');
 608:Caterina.c    **** 	}
 609:Caterina.c    **** 	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
 610:Caterina.c    **** 	else if (Command == 'l')
 611:Caterina.c    **** 	{
 612:Caterina.c    **** 		// Set the lock bits to those given by the host
 613:Caterina.c    **** 		boot_lock_bits_set(FetchNextCommandByte());
 614:Caterina.c    **** 
 615:Caterina.c    **** 		// Send confirmation byte back to the host
 616:Caterina.c    **** 		WriteNextResponseByte('\r');
 617:Caterina.c    **** 	}
 618:Caterina.c    **** 	#endif
 619:Caterina.c    **** 	else if (Command == 'r')
 924               		.loc 1 619 0
 925 0130 8237      		cpi r24,lo8(114)
 926 0132 01F4      		brne .L70
 927               	.LBB165:
 620:Caterina.c    **** 	{
 621:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 928               		.loc 1 621 0
 929 0134 E1E0      		ldi r30,lo8(1)
 930 0136 F0E0      		ldi r31,0
 931 0138 00C0      		rjmp .L142
 932               	.L70:
 933               	.LBE165:
 622:Caterina.c    **** 	}
 623:Caterina.c    **** 	else if (Command == 'F')
 934               		.loc 1 623 0
 935 013a 8634      		cpi r24,lo8(70)
 936 013c 01F4      		brne .L71
 937               	.LBB166:
 624:Caterina.c    **** 	{
 625:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 938               		.loc 1 625 0
 939 013e E0E0      		ldi r30,0
 940 0140 F0E0      		ldi r31,0
 941 0142 00C0      		rjmp .L142
 942               	.L71:
 943               	.LBE166:
 626:Caterina.c    **** 	}
 627:Caterina.c    **** 	else if (Command == 'N')
 944               		.loc 1 627 0
 945 0144 8E34      		cpi r24,lo8(78)
 946 0146 01F4      		brne .L72
 947               	.LBB167:
 628:Caterina.c    **** 	{
 629:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 948               		.loc 1 629 0
 949 0148 E3E0      		ldi r30,lo8(3)
 950 014a F0E0      		ldi r31,0
 951 014c 00C0      		rjmp .L142
 952               	.L72:
 953               	.LBE167:
 630:Caterina.c    **** 	}
 631:Caterina.c    **** 	else if (Command == 'Q')
 954               		.loc 1 631 0
 955 014e 8135      		cpi r24,lo8(81)
 956 0150 01F4      		brne .L73
 957               	.LBB168:
 632:Caterina.c    **** 	{
 633:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 958               		.loc 1 633 0
 959 0152 E2E0      		ldi r30,lo8(2)
 960 0154 F0E0      		ldi r31,0
 961               	.L142:
 962 0156 89E0      		ldi r24,lo8(9)
 963               	.LVL54:
 964               	/* #APP */
 965               	 ;  633 "Caterina.c" 1
 966 0158 8093 5700 		sts 87, r24
 967 015c 8491      		lpm r24, Z
 968               		
 969               	 ;  0 "" 2
 970               	.LVL55:
 971               	/* #NOAPP */
 972 015e 00C0      		rjmp .L140
 973               	.LVL56:
 974               	.L73:
 975               	.LBE168:
 634:Caterina.c    **** 	}
 635:Caterina.c    **** 	#if !defined(NO_BLOCK_SUPPORT)
 636:Caterina.c    **** 	else if (Command == 'b')
 976               		.loc 1 636 0
 977 0160 8236      		cpi r24,lo8(98)
 978 0162 01F4      		brne .L74
 637:Caterina.c    **** 	{
 638:Caterina.c    **** 		WriteNextResponseByte('Y');
 979               		.loc 1 638 0
 980 0164 89E5      		ldi r24,lo8(89)
 981               	.LVL57:
 982 0166 0E94 0000 		call WriteNextResponseByte
 983               	.LVL58:
 639:Caterina.c    **** 
 640:Caterina.c    **** 		// Send block size to the host
 641:Caterina.c    **** 		WriteNextResponseByte(SPM_PAGESIZE >> 8);
 984               		.loc 1 641 0
 985 016a 80E0      		ldi r24,0
 986 016c 0E94 0000 		call WriteNextResponseByte
 987               	.LVL59:
 642:Caterina.c    **** 		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 988               		.loc 1 642 0
 989 0170 80E8      		ldi r24,lo8(-128)
 990 0172 00C0      		rjmp .L140
 991               	.LVL60:
 992               	.L74:
 643:Caterina.c    **** 	}
 644:Caterina.c    **** 	else if ((Command == 'B') || (Command == 'g'))
 993               		.loc 1 644 0
 994 0174 8234      		cpi r24,lo8(66)
 995 0176 01F0      		breq .L75
 996               		.loc 1 644 0 is_stmt 0 discriminator 1
 997 0178 8736      		cpi r24,lo8(103)
 998 017a 01F0      		breq .+2
 999 017c 00C0      		rjmp .L76
 1000               	.L75:
 645:Caterina.c    **** 	{
 646:Caterina.c    **** 		// Keep resetting the timeout counter if we're receiving self-programming instructions
 647:Caterina.c    **** 		Timeout = 0;
 1001               		.loc 1 647 0 is_stmt 1
 1002 017e 1092 0000 		sts Timeout+1,__zero_reg__
 1003 0182 1092 0000 		sts Timeout,__zero_reg__
 1004               	.LVL61:
 1005               	.LBB169:
 1006               	.LBB170:
 330:Caterina.c    **** 	BlockSize  = (FetchNextCommandByte() << 8);
 1007               		.loc 1 330 0
 1008 0186 0E94 0000 		call FetchNextCommandByte
 1009               	.LVL62:
 1010 018a D82E      		mov r13,r24
 1011               	.LVL63:
 331:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 1012               		.loc 1 331 0
 1013 018c 0E94 0000 		call FetchNextCommandByte
 1014               	.LVL64:
 1015 0190 E82E      		mov r14,r24
 1016               	.LVL65:
 333:Caterina.c    **** 	MemoryType =  FetchNextCommandByte();
 1017               		.loc 1 333 0
 1018 0192 0E94 0000 		call FetchNextCommandByte
 1019               	.LVL66:
 1020 0196 C82F      		mov r28,r24
 1021               	.LVL67:
 335:Caterina.c    **** 	if ((MemoryType != 'E') && (MemoryType != 'F'))
 1022               		.loc 1 335 0
 1023 0198 8BEB      		ldi r24,lo8(-69)
 1024               	.LVL68:
 1025 019a 8C0F      		add r24,r28
 1026 019c 8230      		cpi r24,lo8(2)
 1027 019e 00F0      		brlo .L77
 1028               	.LVL69:
 1029               	.L103:
 338:Caterina.c    **** 		WriteNextResponseByte('?');
 1030               		.loc 1 338 0
 1031 01a0 8FE3      		ldi r24,lo8(63)
 1032 01a2 00C0      		rjmp .L140
 1033               	.LVL70:
 1034               	.L77:
 330:Caterina.c    **** 	BlockSize  = (FetchNextCommandByte() << 8);
 1035               		.loc 1 330 0
 1036 01a4 F12C      		mov r15,__zero_reg__
 331:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 1037               		.loc 1 331 0
 1038 01a6 FD28      		or r15,r13
 345:Caterina.c    **** 	TIMSK1 = 0;
 1039               		.loc 1 345 0
 1040 01a8 1092 6F00 		sts 111,__zero_reg__
 348:Caterina.c    **** 	if (Command == 'g')
 1041               		.loc 1 348 0
 1042 01ac D736      		cpi r29,lo8(103)
 1043 01ae 01F0      		breq .+2
 1044 01b0 00C0      		rjmp .L78
 351:Caterina.c    **** 		boot_rww_enable();
 1045               		.loc 1 351 0
 1046 01b2 81E1      		ldi r24,lo8(17)
 1047               	/* #APP */
 1048               	 ;  351 "Caterina.c" 1
 1049 01b4 8093 5700 		sts 87, r24
 1050 01b8 E895      		spm
 1051               		
 1052               	 ;  0 "" 2
 1053               	/* #NOAPP */
 1054 01ba 5701      		movw r10,r14
 327:Caterina.c    **** 	bool     HighByte = false;
 1055               		.loc 1 327 0
 1056 01bc 912C      		mov r9,__zero_reg__
 368:Caterina.c    **** 				HighByte = !HighByte;
 1057               		.loc 1 368 0
 1058 01be D1E0      		ldi r29,lo8(1)
 1059               	.LVL71:
 1060               	.L79:
 353:Caterina.c    **** 		while (BlockSize--)
 1061               		.loc 1 353 0
 1062 01c0 A114      		cp r10,__zero_reg__
 1063 01c2 B104      		cpc r11,__zero_reg__
 1064 01c4 01F4      		brne .+2
 1065 01c6 00C0      		rjmp .L84
 1066 01c8 C090 0000 		lds r12,CurrAddress
 1067 01cc D090 0000 		lds r13,CurrAddress+1
 1068 01d0 E090 0000 		lds r14,CurrAddress+2
 1069 01d4 F090 0000 		lds r15,CurrAddress+3
 355:Caterina.c    **** 			if (MemoryType == 'F')
 1070               		.loc 1 355 0
 1071 01d8 C634      		cpi r28,lo8(70)
 1072 01da 01F4      		brne .L80
 1073               	.LVL72:
 1074               	.LBB171:
 361:Caterina.c    **** 				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 1075               		.loc 1 361 0
 1076 01dc E92D      		mov r30,r9
 1077 01de F0E0      		ldi r31,0
 1078 01e0 EC29      		or r30,r12
 1079 01e2 FD29      		or r31,r13
 1080               	/* #APP */
 1081               	 ;  361 "Caterina.c" 1
 1082 01e4 8491      		lpm r24, Z
 1083               		
 1084               	 ;  0 "" 2
 1085               	.LVL73:
 1086               	/* #NOAPP */
 1087               	.LBE171:
 1088 01e6 0E94 0000 		call WriteNextResponseByte
 1089               	.LVL74:
 365:Caterina.c    **** 				if (HighByte)
 1090               		.loc 1 365 0
 1091 01ea 9920      		tst r9
 1092 01ec 01F0      		breq .L81
 366:Caterina.c    **** 				  CurrAddress += 2;
 1093               		.loc 1 366 0
 1094 01ee 82E0      		ldi r24,2
 1095 01f0 C80E      		add r12,r24
 1096 01f2 D11C      		adc r13,__zero_reg__
 1097 01f4 E11C      		adc r14,__zero_reg__
 1098 01f6 F11C      		adc r15,__zero_reg__
 1099               	.LVL75:
 1100 01f8 C092 0000 		sts CurrAddress,r12
 1101 01fc D092 0000 		sts CurrAddress+1,r13
 1102 0200 E092 0000 		sts CurrAddress+2,r14
 1103 0204 F092 0000 		sts CurrAddress+3,r15
 1104               	.LVL76:
 1105               	.L81:
 368:Caterina.c    **** 				HighByte = !HighByte;
 1106               		.loc 1 368 0
 1107 0208 9D26      		eor r9,r29
 1108               	.LVL77:
 1109 020a 00C0      		rjmp .L82
 1110               	.L80:
 373:Caterina.c    **** 				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 1111               		.loc 1 373 0
 1112 020c D701      		movw r26,r14
 1113 020e C601      		movw r24,r12
 1114 0210 B695      		lsr r27
 1115 0212 A795      		ror r26
 1116 0214 9795      		ror r25
 1117 0216 8795      		ror r24
 1118 0218 0E94 0000 		call __eerd_byte_m32u4
 1119               	.LVL78:
 1120 021c 0E94 0000 		call WriteNextResponseByte
 1121               	.LVL79:
 376:Caterina.c    **** 				CurrAddress += 2;
 1122               		.loc 1 376 0
 1123 0220 E2E0      		ldi r30,2
 1124 0222 CE0E      		add r12,r30
 1125 0224 D11C      		adc r13,__zero_reg__
 1126 0226 E11C      		adc r14,__zero_reg__
 1127 0228 F11C      		adc r15,__zero_reg__
 1128 022a C092 0000 		sts CurrAddress,r12
 1129 022e D092 0000 		sts CurrAddress+1,r13
 1130 0232 E092 0000 		sts CurrAddress+2,r14
 1131 0236 F092 0000 		sts CurrAddress+3,r15
 1132               	.L82:
 1133 023a F1E0      		ldi r31,1
 1134 023c AF1A      		sub r10,r31
 1135 023e B108      		sbc r11,__zero_reg__
 1136               	.LVL80:
 1137 0240 00C0      		rjmp .L79
 1138               	.LVL81:
 1139               	.L78:
 1140               	.LBB172:
 382:Caterina.c    **** 		uint32_t PageStartAddress = CurrAddress;
 1141               		.loc 1 382 0
 1142 0242 8090 0000 		lds r8,CurrAddress
 1143 0246 9090 0000 		lds r9,CurrAddress+1
 1144 024a A090 0000 		lds r10,CurrAddress+2
 1145 024e B090 0000 		lds r11,CurrAddress+3
 384:Caterina.c    **** 		if (MemoryType == 'F')
 1146               		.loc 1 384 0
 1147 0252 C634      		cpi r28,lo8(70)
 1148 0254 01F0      		breq .L85
 1149               	.L87:
 1150               	.LBE172:
 327:Caterina.c    **** 	bool     HighByte = false;
 1151               		.loc 1 327 0
 1152 0256 C12C      		mov r12,__zero_reg__
 1153 0258 D12C      		mov r13,__zero_reg__
 1154               	.LVL82:
 1155               	.LBB173:
 408:Caterina.c    **** 				HighByte = !HighByte;
 1156               		.loc 1 408 0
 1157 025a D1E0      		ldi r29,lo8(1)
 1158               	.LVL83:
 1159 025c 00C0      		rjmp .L86
 1160               	.LVL84:
 1161               	.L85:
 386:Caterina.c    **** 			boot_page_erase(PageStartAddress);
 1162               		.loc 1 386 0
 1163 025e 83E0      		ldi r24,lo8(3)
 1164 0260 F401      		movw r30,r8
 1165               	/* #APP */
 1166               	 ;  386 "Caterina.c" 1
 1167 0262 8093 5700 		sts 87, r24
 1168 0266 E895      		spm
 1169               		
 1170               	 ;  0 "" 2
 1171               	/* #NOAPP */
 1172               	.L88:
 387:Caterina.c    **** 			boot_spm_busy_wait();
 1173               		.loc 1 387 0
 1174 0268 07B6      		in __tmp_reg__,0x37
 1175 026a 00FC      		sbrc __tmp_reg__,0
 1176 026c 00C0      		rjmp .L88
 1177 026e 00C0      		rjmp .L87
 1178               	.LVL85:
 1179               	.L93:
 392:Caterina.c    **** 			if (MemoryType == 'F')
 1180               		.loc 1 392 0
 1181 0270 C634      		cpi r28,lo8(70)
 1182 0272 01F4      		brne .L89
 395:Caterina.c    **** 				if (HighByte)
 1183               		.loc 1 395 0
 1184 0274 DD20      		tst r13
 1185 0276 01F0      		breq .L90
 398:Caterina.c    **** 					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 1186               		.loc 1 398 0
 1187 0278 4090 0000 		lds r4,CurrAddress
 1188 027c 5090 0000 		lds r5,CurrAddress+1
 1189 0280 6090 0000 		lds r6,CurrAddress+2
 1190 0284 7090 0000 		lds r7,CurrAddress+3
 1191 0288 0E94 0000 		call FetchNextCommandByte
 1192               	.LVL86:
 1193 028c 2C2D      		mov r18,r12
 1194 028e 30E0      		ldi r19,0
 1195 0290 382B      		or r19,r24
 1196 0292 F201      		movw r30,r4
 1197               	/* #APP */
 1198               	 ;  398 "Caterina.c" 1
 1199 0294 0901      		movw  r0, r18
 1200 0296 D093 5700 		sts 87, r29
 1201 029a E895      		spm
 1202 029c 1124      		clr  r1
 1203               		
 1204               	 ;  0 "" 2
 401:Caterina.c    **** 					CurrAddress += 2;
 1205               		.loc 1 401 0
 1206               	/* #NOAPP */
 1207 029e F2E0      		ldi r31,2
 1208 02a0 4F0E      		add r4,r31
 1209 02a2 511C      		adc r5,__zero_reg__
 1210 02a4 611C      		adc r6,__zero_reg__
 1211 02a6 711C      		adc r7,__zero_reg__
 1212 02a8 4092 0000 		sts CurrAddress,r4
 1213 02ac 5092 0000 		sts CurrAddress+1,r5
 1214 02b0 6092 0000 		sts CurrAddress+2,r6
 1215 02b4 7092 0000 		sts CurrAddress+3,r7
 1216               	.L91:
 408:Caterina.c    **** 				HighByte = !HighByte;
 1217               		.loc 1 408 0
 1218 02b8 DD26      		eor r13,r29
 1219               	.LVL87:
 1220               	.L92:
 1221 02ba 21E0      		ldi r18,1
 1222 02bc E21A      		sub r14,r18
 1223 02be F108      		sbc r15,__zero_reg__
 1224               	.LVL88:
 1225               	.L86:
 390:Caterina.c    **** 		while (BlockSize--)
 1226               		.loc 1 390 0
 1227 02c0 E114      		cp r14,__zero_reg__
 1228 02c2 F104      		cpc r15,__zero_reg__
 1229 02c4 01F4      		brne .L93
 1230 02c6 00C0      		rjmp .L143
 1231               	.L90:
 405:Caterina.c    **** 					LowByte = FetchNextCommandByte();
 1232               		.loc 1 405 0
 1233 02c8 0E94 0000 		call FetchNextCommandByte
 1234               	.LVL89:
 1235 02cc C82E      		mov r12,r24
 1236               	.LVL90:
 1237 02ce 00C0      		rjmp .L91
 1238               	.L89:
 413:Caterina.c    **** 				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1239               		.loc 1 413 0
 1240 02d0 0E94 0000 		call FetchNextCommandByte
 1241               	.LVL91:
 1242 02d4 682F      		mov r22,r24
 1243 02d6 8091 0000 		lds r24,CurrAddress
 1244 02da 9091 0000 		lds r25,CurrAddress+1
 1245 02de A091 0000 		lds r26,CurrAddress+2
 1246 02e2 B091 0000 		lds r27,CurrAddress+3
 1247 02e6 B695      		lsr r27
 1248 02e8 A795      		ror r26
 1249 02ea 9795      		ror r25
 1250 02ec 8795      		ror r24
 1251 02ee 0E94 0000 		call __eewr_byte_m32u4
 1252               	.LVL92:
 416:Caterina.c    **** 				CurrAddress += 2;
 1253               		.loc 1 416 0
 1254 02f2 4091 0000 		lds r20,CurrAddress
 1255 02f6 5091 0000 		lds r21,CurrAddress+1
 1256 02fa 6091 0000 		lds r22,CurrAddress+2
 1257 02fe 7091 0000 		lds r23,CurrAddress+3
 1258 0302 4E5F      		subi r20,-2
 1259 0304 5F4F      		sbci r21,-1
 1260 0306 6F4F      		sbci r22,-1
 1261 0308 7F4F      		sbci r23,-1
 1262 030a 4093 0000 		sts CurrAddress,r20
 1263 030e 5093 0000 		sts CurrAddress+1,r21
 1264 0312 6093 0000 		sts CurrAddress+2,r22
 1265 0316 7093 0000 		sts CurrAddress+3,r23
 1266 031a 00C0      		rjmp .L92
 1267               	.L143:
 421:Caterina.c    **** 		if (MemoryType == 'F')
 1268               		.loc 1 421 0
 1269 031c C634      		cpi r28,lo8(70)
 1270 031e 01F4      		brne .L94
 424:Caterina.c    **** 			boot_page_write(PageStartAddress);
 1271               		.loc 1 424 0
 1272 0320 85E0      		ldi r24,lo8(5)
 1273 0322 F401      		movw r30,r8
 1274               	/* #APP */
 1275               	 ;  424 "Caterina.c" 1
 1276 0324 8093 5700 		sts 87, r24
 1277 0328 E895      		spm
 1278               		
 1279               	 ;  0 "" 2
 1280               	/* #NOAPP */
 1281               	.L95:
 427:Caterina.c    **** 			boot_spm_busy_wait();
 1282               		.loc 1 427 0
 1283 032a 07B6      		in __tmp_reg__,0x37
 1284 032c 00FC      		sbrc __tmp_reg__,0
 1285 032e 00C0      		rjmp .L95
 1286               	.L94:
 431:Caterina.c    **** 		WriteNextResponseByte('\r');
 1287               		.loc 1 431 0
 1288 0330 8DE0      		ldi r24,lo8(13)
 1289 0332 0E94 0000 		call WriteNextResponseByte
 1290               	.LVL93:
 1291               	.L84:
 1292               	.LBE173:
 435:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);
 1293               		.loc 1 435 0
 1294 0336 82E0      		ldi r24,lo8(2)
 1295 0338 8093 6F00 		sts 111,r24
 1296 033c 00C0      		rjmp .L51
 1297               	.LVL94:
 1298               	.L76:
 1299               	.LBE170:
 1300               	.LBE169:
 648:Caterina.c    **** 		// Delegate the block write/read to a separate function for clarity
 649:Caterina.c    **** 		ReadWriteMemoryBlock(Command);
 650:Caterina.c    **** 	}
 651:Caterina.c    **** 	#endif
 652:Caterina.c    **** 	#if !defined(NO_FLASH_BYTE_SUPPORT)
 653:Caterina.c    **** 	else if (Command == 'C')
 1301               		.loc 1 653 0
 1302 033e 8334      		cpi r24,lo8(67)
 1303 0340 01F4      		brne .L96
 654:Caterina.c    **** 	{
 655:Caterina.c    **** 		// Write the high byte to the current flash page
 656:Caterina.c    **** 		boot_page_fill(CurrAddress, FetchNextCommandByte());
 1304               		.loc 1 656 0
 1305 0342 C091 0000 		lds r28,CurrAddress
 1306 0346 D091 0000 		lds r29,CurrAddress+1
 1307 034a 0E94 0000 		call FetchNextCommandByte
 1308               	.LVL95:
 1309 034e 90E0      		ldi r25,0
 1310 0350 21E0      		ldi r18,lo8(1)
 1311 0352 FE01      		movw r30,r28
 1312               	/* #APP */
 1313               	 ;  656 "Caterina.c" 1
 1314 0354 0C01      		movw  r0, r24
 1315 0356 2093 5700 		sts 87, r18
 1316 035a E895      		spm
 1317 035c 1124      		clr  r1
 1318               		
 1319               	 ;  0 "" 2
 1320               	/* #NOAPP */
 1321 035e 00C0      		rjmp .L139
 1322               	.LVL96:
 1323               	.L96:
 657:Caterina.c    **** 
 658:Caterina.c    **** 		// Send confirmation byte back to the host
 659:Caterina.c    **** 		WriteNextResponseByte('\r');
 660:Caterina.c    **** 	}
 661:Caterina.c    **** 	else if (Command == 'c')
 1324               		.loc 1 661 0
 1325 0360 8336      		cpi r24,lo8(99)
 1326 0362 01F4      		brne .L97
 662:Caterina.c    **** 	{
 663:Caterina.c    **** 		// Write the low byte to the current flash page
 664:Caterina.c    **** 		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
 1327               		.loc 1 664 0
 1328 0364 C090 0000 		lds r12,CurrAddress
 1329 0368 D090 0000 		lds r13,CurrAddress+1
 1330 036c E090 0000 		lds r14,CurrAddress+2
 1331 0370 F090 0000 		lds r15,CurrAddress+3
 1332 0374 0E94 0000 		call FetchNextCommandByte
 1333               	.LVL97:
 1334 0378 F601      		movw r30,r12
 1335 037a E160      		ori r30,1
 1336 037c 90E0      		ldi r25,0
 1337 037e 21E0      		ldi r18,lo8(1)
 1338               	/* #APP */
 1339               	 ;  664 "Caterina.c" 1
 1340 0380 0C01      		movw  r0, r24
 1341 0382 2093 5700 		sts 87, r18
 1342 0386 E895      		spm
 1343 0388 1124      		clr  r1
 1344               		
 1345               	 ;  0 "" 2
 665:Caterina.c    **** 
 666:Caterina.c    **** 		// Increment the address
 667:Caterina.c    **** 		CurrAddress += 2;
 1346               		.loc 1 667 0
 1347               	/* #NOAPP */
 1348 038a F2E0      		ldi r31,2
 1349 038c CF0E      		add r12,r31
 1350 038e D11C      		adc r13,__zero_reg__
 1351 0390 E11C      		adc r14,__zero_reg__
 1352 0392 F11C      		adc r15,__zero_reg__
 1353 0394 C092 0000 		sts CurrAddress,r12
 1354 0398 D092 0000 		sts CurrAddress+1,r13
 1355 039c E092 0000 		sts CurrAddress+2,r14
 1356 03a0 F092 0000 		sts CurrAddress+3,r15
 1357 03a4 00C0      		rjmp .L139
 1358               	.LVL98:
 1359               	.L97:
 668:Caterina.c    **** 
 669:Caterina.c    **** 		// Send confirmation byte back to the host
 670:Caterina.c    **** 		WriteNextResponseByte('\r');
 671:Caterina.c    **** 	}
 672:Caterina.c    **** 	else if (Command == 'm')
 1360               		.loc 1 672 0
 1361 03a6 8D36      		cpi r24,lo8(109)
 1362 03a8 01F4      		brne .L98
 673:Caterina.c    **** 	{
 674:Caterina.c    **** 		// Commit the flash page to memory
 675:Caterina.c    **** 		boot_page_write(CurrAddress);
 1363               		.loc 1 675 0
 1364 03aa E091 0000 		lds r30,CurrAddress
 1365 03ae F091 0000 		lds r31,CurrAddress+1
 1366 03b2 85E0      		ldi r24,lo8(5)
 1367               	.LVL99:
 1368               	/* #APP */
 1369               	 ;  675 "Caterina.c" 1
 1370 03b4 8093 5700 		sts 87, r24
 1371 03b8 E895      		spm
 1372               		
 1373               	 ;  0 "" 2
 1374               	/* #NOAPP */
 1375               	.L99:
 676:Caterina.c    **** 
 677:Caterina.c    **** 		// Wait until write operation has completed
 678:Caterina.c    **** 		boot_spm_busy_wait();
 1376               		.loc 1 678 0 discriminator 1
 1377 03ba 07B6      		in __tmp_reg__,0x37
 1378 03bc 00FC      		sbrc __tmp_reg__,0
 1379 03be 00C0      		rjmp .L99
 1380 03c0 00C0      		rjmp .L139
 1381               	.LVL100:
 1382               	.L98:
 679:Caterina.c    **** 
 680:Caterina.c    **** 		// Send confirmation byte back to the host
 681:Caterina.c    **** 		WriteNextResponseByte('\r');
 682:Caterina.c    **** 	}
 683:Caterina.c    **** 	else if (Command == 'R')
 1383               		.loc 1 683 0
 1384 03c2 8235      		cpi r24,lo8(82)
 1385 03c4 01F4      		brne .L100
 1386               	.LBB174:
 1387               	.LBB175:
 684:Caterina.c    **** 	{
 685:Caterina.c    **** 		#if (FLASHEND > 0xFFFF)
 686:Caterina.c    **** 		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 687:Caterina.c    **** 		#else
 688:Caterina.c    **** 		uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1388               		.loc 1 688 0
 1389 03c6 E091 0000 		lds r30,CurrAddress
 1390 03ca F091 0000 		lds r31,CurrAddress+1
 1391               	.LVL101:
 1392               	/* #APP */
 1393               	 ;  688 "Caterina.c" 1
 1394 03ce C591      		lpm r28, Z+
 1395 03d0 D491      		lpm r29, Z
 1396               		
 1397               	 ;  0 "" 2
 1398               	.LVL102:
 1399               	/* #NOAPP */
 1400               	.LBE175:
 689:Caterina.c    **** 		#endif
 690:Caterina.c    **** 
 691:Caterina.c    **** 		WriteNextResponseByte(ProgramWord >> 8);
 1401               		.loc 1 691 0
 1402 03d2 8D2F      		mov r24,r29
 1403               	.LVL103:
 1404 03d4 0E94 0000 		call WriteNextResponseByte
 1405               	.LVL104:
 692:Caterina.c    **** 		WriteNextResponseByte(ProgramWord & 0xFF);
 1406               		.loc 1 692 0
 1407 03d8 8C2F      		mov r24,r28
 1408 03da 00C0      		rjmp .L140
 1409               	.LVL105:
 1410               	.L100:
 1411               	.LBE174:
 693:Caterina.c    **** 	}
 694:Caterina.c    **** 	#endif
 695:Caterina.c    **** 	#if !defined(NO_EEPROM_BYTE_SUPPORT)
 696:Caterina.c    **** 	else if (Command == 'D')
 1412               		.loc 1 696 0
 1413 03dc 8434      		cpi r24,lo8(68)
 1414 03de 01F4      		brne .L101
 697:Caterina.c    **** 	{
 698:Caterina.c    **** 		// Read the byte from the endpoint and write it to the EEPROM
 699:Caterina.c    **** 		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1415               		.loc 1 699 0
 1416 03e0 0E94 0000 		call FetchNextCommandByte
 1417               	.LVL106:
 1418 03e4 682F      		mov r22,r24
 1419 03e6 8091 0000 		lds r24,CurrAddress
 1420 03ea 9091 0000 		lds r25,CurrAddress+1
 1421 03ee A091 0000 		lds r26,CurrAddress+2
 1422 03f2 B091 0000 		lds r27,CurrAddress+3
 1423 03f6 B695      		lsr r27
 1424 03f8 A795      		ror r26
 1425 03fa 9795      		ror r25
 1426 03fc 8795      		ror r24
 1427 03fe 0E94 0000 		call __eewr_byte_m32u4
 1428               	.LVL107:
 700:Caterina.c    **** 
 701:Caterina.c    **** 		// Increment the address after use
 702:Caterina.c    **** 		CurrAddress += 2;
 1429               		.loc 1 702 0
 1430 0402 8091 0000 		lds r24,CurrAddress
 1431 0406 9091 0000 		lds r25,CurrAddress+1
 1432 040a A091 0000 		lds r26,CurrAddress+2
 1433 040e B091 0000 		lds r27,CurrAddress+3
 1434 0412 0296      		adiw r24,2
 1435 0414 A11D      		adc r26,__zero_reg__
 1436 0416 B11D      		adc r27,__zero_reg__
 1437               	.L141:
 1438 0418 8093 0000 		sts CurrAddress,r24
 1439 041c 9093 0000 		sts CurrAddress+1,r25
 1440 0420 A093 0000 		sts CurrAddress+2,r26
 1441 0424 B093 0000 		sts CurrAddress+3,r27
 1442 0428 00C0      		rjmp .L139
 1443               	.LVL108:
 1444               	.L101:
 703:Caterina.c    **** 
 704:Caterina.c    **** 		// Send confirmation byte back to the host
 705:Caterina.c    **** 		WriteNextResponseByte('\r');
 706:Caterina.c    **** 	}
 707:Caterina.c    **** 	else if (Command == 'd')
 1445               		.loc 1 707 0
 1446 042a 8436      		cpi r24,lo8(100)
 1447 042c 01F4      		brne .L102
 708:Caterina.c    **** 	{
 709:Caterina.c    **** 		// Read the EEPROM byte and write it to the endpoint
 710:Caterina.c    **** 		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1448               		.loc 1 710 0
 1449 042e C090 0000 		lds r12,CurrAddress
 1450 0432 D090 0000 		lds r13,CurrAddress+1
 1451 0436 E090 0000 		lds r14,CurrAddress+2
 1452 043a F090 0000 		lds r15,CurrAddress+3
 1453 043e D701      		movw r26,r14
 1454 0440 C601      		movw r24,r12
 1455               	.LVL109:
 1456 0442 B695      		lsr r27
 1457 0444 A795      		ror r26
 1458 0446 9795      		ror r25
 1459 0448 8795      		ror r24
 1460 044a 0E94 0000 		call __eerd_byte_m32u4
 1461               	.LVL110:
 1462 044e 0E94 0000 		call WriteNextResponseByte
 1463               	.LVL111:
 711:Caterina.c    **** 
 712:Caterina.c    **** 		// Increment the address after use
 713:Caterina.c    **** 		CurrAddress += 2;
 1464               		.loc 1 713 0
 1465 0452 22E0      		ldi r18,2
 1466 0454 C20E      		add r12,r18
 1467 0456 D11C      		adc r13,__zero_reg__
 1468 0458 E11C      		adc r14,__zero_reg__
 1469 045a F11C      		adc r15,__zero_reg__
 1470 045c C092 0000 		sts CurrAddress,r12
 1471 0460 D092 0000 		sts CurrAddress+1,r13
 1472 0464 E092 0000 		sts CurrAddress+2,r14
 1473 0468 F092 0000 		sts CurrAddress+3,r15
 1474 046c 00C0      		rjmp .L51
 1475               	.LVL112:
 1476               	.L102:
 714:Caterina.c    **** 	}
 715:Caterina.c    **** 	#endif
 716:Caterina.c    **** 	else if (Command != 27)
 1477               		.loc 1 716 0
 1478 046e 8B31      		cpi r24,lo8(27)
 1479 0470 01F0      		breq .+2
 1480 0472 00C0      		rjmp .L103
 1481               	.LVL113:
 1482               	.L51:
 1483               	.LBB176:
 1484               	.LBB177:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1485               		.loc 2 330 0
 1486 0474 83E0      		ldi r24,lo8(3)
 1487 0476 8093 E900 		sts 233,r24
 1488               	.LBE177:
 1489               	.LBE176:
 1490               	.LBB178:
 1491               	.LBB179:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 1492               		.loc 2 420 0
 1493 047a 9091 E800 		lds r25,232
 1494               	.LVL114:
 1495               	.LBE179:
 1496               	.LBE178:
 1497               	.LBB180:
 1498               	.LBB181:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1499               		.loc 2 516 0
 1500 047e 8091 E800 		lds r24,232
 1501 0482 8E77      		andi r24,lo8(126)
 1502 0484 8093 E800 		sts 232,r24
 1503               	.LBE181:
 1504               	.LBE180:
 717:Caterina.c    **** 	{
 718:Caterina.c    **** 		// Unknown (non-sync) command, return fail code
 719:Caterina.c    **** 		WriteNextResponseByte('?');
 720:Caterina.c    **** 	}
 721:Caterina.c    **** 
 722:Caterina.c    **** 
 723:Caterina.c    **** 	/* Select the IN endpoint */
 724:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 725:Caterina.c    **** 
 726:Caterina.c    **** 	/* Remember if the endpoint is completely full before clearing it */
 727:Caterina.c    **** 	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 728:Caterina.c    **** 
 729:Caterina.c    **** 	/* Send the endpoint data to the host */
 730:Caterina.c    **** 	Endpoint_ClearIN();
 731:Caterina.c    **** 
 732:Caterina.c    **** 	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to sign
 733:Caterina.c    **** 	if (IsEndpointFull)
 1505               		.loc 1 733 0
 1506 0488 95FD      		sbrc r25,5
 1507 048a 00C0      		rjmp .L109
 1508               	.L108:
 1509               	.LBB182:
 1510               	.LBB183:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 1511               		.loc 2 467 0
 1512 048c 8091 E800 		lds r24,232
 1513               	.LBE183:
 1514               	.LBE182:
 734:Caterina.c    **** 	{
 735:Caterina.c    **** 		while (!(Endpoint_IsINReady()))
 1515               		.loc 1 735 0
 1516 0490 80FD      		sbrc r24,0
 1517 0492 00C0      		rjmp .L106
 736:Caterina.c    **** 		{
 737:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 1518               		.loc 1 737 0
 1519 0494 8EB3      		in r24,0x1e
 1520 0496 8111      		cpse r24,__zero_reg__
 1521 0498 00C0      		rjmp .L108
 1522 049a 00C0      		rjmp .L43
 1523               	.L106:
 1524               	.LBB184:
 1525               	.LBB185:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1526               		.loc 2 516 0
 1527 049c 8091 E800 		lds r24,232
 1528 04a0 8E77      		andi r24,lo8(126)
 1529 04a2 8093 E800 		sts 232,r24
 1530 04a6 00C0      		rjmp .L109
 1531               	.L110:
 1532               	.LBE185:
 1533               	.LBE184:
 738:Caterina.c    **** 			  return;
 739:Caterina.c    **** 		}
 740:Caterina.c    **** 
 741:Caterina.c    **** 		Endpoint_ClearIN();
 742:Caterina.c    **** 	}
 743:Caterina.c    **** 
 744:Caterina.c    **** 	/* Wait until the data has been sent to the host */
 745:Caterina.c    **** 	while (!(Endpoint_IsINReady()))
 746:Caterina.c    **** 	{
 747:Caterina.c    **** 		if (USB_DeviceState == DEVICE_STATE_Unattached)
 1534               		.loc 1 747 0
 1535 04a8 8EB3      		in r24,0x1e
 1536 04aa 8823      		tst r24
 1537 04ac 01F0      		breq .L43
 1538               	.L109:
 1539               	.LBB186:
 1540               	.LBB187:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 1541               		.loc 2 467 0 discriminator 1
 1542 04ae 8091 E800 		lds r24,232
 1543               	.LBE187:
 1544               	.LBE186:
 745:Caterina.c    **** 	while (!(Endpoint_IsINReady()))
 1545               		.loc 1 745 0 discriminator 1
 1546 04b2 80FF      		sbrs r24,0
 1547 04b4 00C0      		rjmp .L110
 1548               	.LVL115:
 1549               	.LBB188:
 1550               	.LBB189:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1551               		.loc 2 330 0
 1552 04b6 84E0      		ldi r24,lo8(4)
 1553 04b8 8093 E900 		sts 233,r24
 1554               	.LBE189:
 1555               	.LBE188:
 1556               	.LBB190:
 1557               	.LBB191:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1558               		.loc 2 531 0
 1559 04bc 8091 E800 		lds r24,232
 1560 04c0 8B77      		andi r24,lo8(123)
 1561 04c2 8093 E800 		sts 232,r24
 1562               	.LVL116:
 1563               	.L43:
 1564               	/* epilogue start */
 1565               	.LBE191:
 1566               	.LBE190:
 748:Caterina.c    **** 		  return;
 749:Caterina.c    **** 	}
 750:Caterina.c    **** 
 751:Caterina.c    **** 	/* Select the OUT endpoint */
 752:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 753:Caterina.c    **** 
 754:Caterina.c    **** 	/* Acknowledge the command from the host */
 755:Caterina.c    **** 	Endpoint_ClearOUT();
 756:Caterina.c    **** }
 1567               		.loc 1 756 0
 1568 04c6 DF91      		pop r29
 1569 04c8 CF91      		pop r28
 1570 04ca FF90      		pop r15
 1571 04cc EF90      		pop r14
 1572 04ce DF90      		pop r13
 1573 04d0 CF90      		pop r12
 1574 04d2 BF90      		pop r11
 1575 04d4 AF90      		pop r10
 1576 04d6 9F90      		pop r9
 1577 04d8 8F90      		pop r8
 1578 04da 7F90      		pop r7
 1579 04dc 6F90      		pop r6
 1580 04de 5F90      		pop r5
 1581 04e0 4F90      		pop r4
 1582 04e2 0895      		ret
 1583               		.cfi_endproc
 1584               	.LFE106:
 1586               		.section	.text.startup.main,"ax",@progbits
 1587               	.global	main
 1589               	main:
 1590               	.LFB98:
 123:Caterina.c    **** {
 1591               		.loc 1 123 0
 1592               		.cfi_startproc
 1593 0000 CF93      		push r28
 1594               	.LCFI21:
 1595               		.cfi_def_cfa_offset 3
 1596               		.cfi_offset 28, -2
 1597               	/* prologue: function */
 1598               	/* frame size = 0 */
 1599               	/* stack size = 1 */
 1600               	.L__stack_usage = 1
 125:Caterina.c    **** 	DDRD = 0xff;
 1601               		.loc 1 125 0
 1602 0002 8FEF      		ldi r24,lo8(-1)
 1603 0004 8AB9      		out 0xa,r24
 1604               	.LVL117:
 128:Caterina.c    **** 	uint16_t bootKeyPtrVal = *bootKeyPtr;
 1605               		.loc 1 128 0
 1606 0006 8091 0008 		lds r24,2048
 1607 000a 9091 0108 		lds r25,2048+1
 129:Caterina.c    **** 	*bootKeyPtr = 0;
 1608               		.loc 1 129 0
 1609 000e 1092 0108 		sts 2048+1,__zero_reg__
 1610 0012 1092 0008 		sts 2048,__zero_reg__
 132:Caterina.c    **** 	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
 1611               		.loc 1 132 0
 1612 0016 84B7      		in r24,0x34
 134:Caterina.c    **** 	MCUSR = 0;							// clear all reset flags
 1613               		.loc 1 134 0
 1614 0018 14BE      		out 0x34,__zero_reg__
 136:Caterina.c    **** 	wdt_disable();
 1615               		.loc 1 136 0
 1616 001a 88E1      		ldi r24,lo8(24)
 1617               	/* #APP */
 1618               	 ;  136 "Caterina.c" 1
 1619 001c 0FB6      		in __tmp_reg__, __SREG__
 1620 001e F894      		cli
 1621 0020 8093 6000 		sts 96, r24
 1622 0024 1092 6000 		sts 96, __zero_reg__
 1623 0028 0FBE      		out __SREG__,__tmp_reg__
 1624               		
 1625               	 ;  0 "" 2
 155:Caterina.c    **** 	SetupHardware();
 1626               		.loc 1 155 0
 1627               	/* #NOAPP */
 1628 002a 0E94 0000 		call SetupHardware
 1629               	.LVL118:
 161:Caterina.c    **** 	boot_setting_nc = eeprom_read_byte( (uint8_t*) 0x40);
 1630               		.loc 1 161 0
 1631 002e 80E4      		ldi r24,lo8(64)
 1632 0030 90E0      		ldi r25,0
 1633 0032 0E94 0000 		call __eerd_byte_m32u4
 1634               	.LVL119:
 163:Caterina.c    **** 	if( boot_setting_nc  == 0x01)
 1635               		.loc 1 163 0
 1636 0036 8130      		cpi r24,lo8(1)
 1637 0038 01F4      		brne .L145
 165:Caterina.c    **** 	      NC_BOOT_PINS_SETUP();
 1638               		.loc 1 165 0
 1639 003a 539A      		sbi 0xa,3
 1640 003c 549A      		sbi 0xa,4
 1641 003e 529A      		sbi 0xa,2
 166:Caterina.c    **** 	      NC_uSD();// This is uSD boot mode.
 1642               		.loc 1 166 0
 1643 0040 5B98      		cbi 0xb,3
 1644               	.LVL120:
 1645 0042 00C0      		rjmp .L150
 1646               	.LVL121:
 1647               	.L145:
 171:Caterina.c    **** 	else if ( boot_setting_nc == 0x02)
 1648               		.loc 1 171 0
 1649 0044 8230      		cpi r24,lo8(2)
 1650 0046 01F4      		brne .L146
 173:Caterina.c    **** 		  NC_BOOT_PINS_SETUP();
 1651               		.loc 1 173 0
 1652 0048 539A      		sbi 0xa,3
 1653 004a 549A      		sbi 0xa,4
 1654 004c 529A      		sbi 0xa,2
 174:Caterina.c    **** 		  NC_eMMC(); // This is emmc boot mode. 
 1655               		.loc 1 174 0
 1656 004e 5B9A      		sbi 0xb,3
 1657               	.L150:
 1658               	.LVL122:
 1659               	.LBB192:
 1660               	.LBB193:
 1661               		.loc 3 164 0
 1662 0050 2FEF      		ldi r18,lo8(319999)
 1663 0052 81EE      		ldi r24,hi8(319999)
 1664 0054 94E0      		ldi r25,hlo8(319999)
 1665 0056 2150      		1: subi r18,1
 1666 0058 8040      		sbci r24,0
 1667 005a 9040      		sbci r25,0
 1668 005c 01F4      		brne 1b
 1669               	.LVL123:
 1670 005e 00C0      		rjmp .
 1671 0060 0000      		nop
 1672               	.LBE193:
 1673               	.LBE192:
 176:Caterina.c    **** 		  TURN_ON_NC();
 1674               		.loc 1 176 0
 1675 0062 0E94 0000 		call TURN_ON_NC
 1676               	.LVL124:
 1677               	.L146:
 1678               	.LBB194:
 1679               	.LBB195:
 1680               		.loc 3 164 0
 1681 0066 2FEF      		ldi r18,lo8(12799999)
 1682 0068 8FE4      		ldi r24,hi8(12799999)
 1683 006a 93EC      		ldi r25,hlo8(12799999)
 1684 006c 2150      		1: subi r18,1
 1685 006e 8040      		sbci r24,0
 1686 0070 9040      		sbci r25,0
 1687 0072 01F4      		brne 1b
 1688 0074 00C0      		rjmp .
 1689 0076 0000      		nop
 1690               	.LBE195:
 1691               	.LBE194:
 182:Caterina.c    **** 	sei();
 1692               		.loc 1 182 0
 1693               	/* #APP */
 1694               	 ;  182 "Caterina.c" 1
 1695 0078 7894      		sei
 1696               	 ;  0 "" 2
 183:Caterina.c    **** 	Timeout = 0;
 1697               		.loc 1 183 0
 1698               	/* #NOAPP */
 1699 007a 1092 0000 		sts Timeout+1,__zero_reg__
 1700 007e 1092 0000 		sts Timeout,__zero_reg__
 188:Caterina.c    **** 		PORTD = (0x10);
 1701               		.loc 1 188 0
 1702 0082 C0E1      		ldi r28,lo8(16)
 1703               	.L147:
 185:Caterina.c    **** 	while (RunBootloader)
 1704               		.loc 1 185 0 discriminator 1
 1705 0084 8091 0000 		lds r24,RunBootloader
 1706 0088 8823      		tst r24
 1707 008a 01F0      		breq .L151
 187:Caterina.c    **** 		NC_eMMC();
 1708               		.loc 1 187 0
 1709 008c 5B9A      		sbi 0xb,3
 188:Caterina.c    **** 		PORTD = (0x10);
 1710               		.loc 1 188 0
 1711 008e CBB9      		out 0xb,r28
 189:Caterina.c    **** 		CDC_Task();
 1712               		.loc 1 189 0
 1713 0090 0E94 0000 		call CDC_Task
 1714               	.LVL125:
 190:Caterina.c    **** 		USB_USBTask();
 1715               		.loc 1 190 0
 1716 0094 0E94 0000 		call USB_USBTask
 1717               	.LVL126:
 192:Caterina.c    **** 		if (Timeout > TIMEOUT_PERIOD)
 1718               		.loc 1 192 0
 1719 0098 8091 0000 		lds r24,Timeout
 1720 009c 9091 0000 		lds r25,Timeout+1
 1721 00a0 8134      		cpi r24,65
 1722 00a2 9F41      		sbci r25,31
 1723 00a4 00F0      		brlo .L148
 193:Caterina.c    **** 			RunBootloader = false;
 1724               		.loc 1 193 0
 1725 00a6 1092 0000 		sts RunBootloader,__zero_reg__
 1726               	.L148:
 194:Caterina.c    **** 		LEDPulse();
 1727               		.loc 1 194 0
 1728 00aa 0E94 0000 		call LEDPulse
 1729               	.LVL127:
 1730 00ae 00C0      		rjmp .L147
 1731               	.L151:
 1732               	.LBB196:
 1733               	.LBB197:
 1734               		.file 5 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 1735               		.loc 5 182 0
 1736 00b0 8091 E000 		lds r24,224
 1737 00b4 8160      		ori r24,lo8(1)
 1738 00b6 8093 E000 		sts 224,r24
 1739               	.LBE197:
 1740               	.LBE196:
 200:Caterina.c    **** 	StartSketch();
 1741               		.loc 1 200 0
 1742 00ba 0E94 0000 		call StartSketch
 1743               	.LVL128:
 201:Caterina.c    **** }
 1744               		.loc 1 201 0
 1745 00be 80E0      		ldi r24,0
 1746 00c0 90E0      		ldi r25,0
 1747               	/* epilogue start */
 1748 00c2 CF91      		pop r28
 1749 00c4 0895      		ret
 1750               		.cfi_endproc
 1751               	.LFE98:
 1753               		.comm	LLEDPulse,2,1
 1754               	.global	bootKeyPtr
 1755               		.section	.rodata
 1758               	bootKeyPtr:
 1759 0000 0008      		.word	2048
 1760               	.global	bootKey
 1761               		.data
 1764               	bootKey:
 1765 0000 7777      		.word	30583
 1766               	.global	Timeout
 1767               		.section .bss
 1770               	Timeout:
 1771 0000 0000      		.zero	2
 1772               	.global	RxLEDPulse
 1775               	RxLEDPulse:
 1776 0002 0000      		.zero	2
 1777               	.global	TxLEDPulse
 1780               	TxLEDPulse:
 1781 0004 0000      		.zero	2
 1782               		.data
 1785               	RunBootloader:
 1786 0002 01        		.byte	1
 1787               		.local	CurrAddress
 1788               		.comm	CurrAddress,4,1
 1791               	LineEncoding:
 1792 0003 00        		.byte	0
 1793 0004 00        		.byte	0
 1794 0005 00        		.byte	0
 1795 0006 00        		.byte	0
 1796 0007 00        		.byte	0
 1797 0008 00        		.byte	0
 1798 0009 08        		.byte	8
 1799               		.text
 1800               	.Letext0:
 1801               		.file 6 "/usr/lib/avr/include/stdint.h"
 1802               		.file 7 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1803               		.file 8 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1804               		.file 9 "../../LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1805               		.file 10 "../../LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 1806               		.file 11 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1807               		.file 12 "/usr/lib/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Caterina.c
     /tmp/ccb2Hsuy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccb2Hsuy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccb2Hsuy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccb2Hsuy.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccb2Hsuy.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccb2Hsuy.s:12     .text.FetchNextCommandByte:0000000000000000 FetchNextCommandByte
     /tmp/ccb2Hsuy.s:80     .text.WriteNextResponseByte:0000000000000000 WriteNextResponseByte
     /tmp/ccb2Hsuy.s:1780   .bss:0000000000000004 TxLEDPulse
     /tmp/ccb2Hsuy.s:154    .text.StartSketch:0000000000000000 StartSketch
     /tmp/ccb2Hsuy.s:202    .text.LEDPulse:0000000000000000 LEDPulse
                            *COM*:0000000000000002 LLEDPulse
     /tmp/ccb2Hsuy.s:246    .text.TURN_ON_NC:0000000000000000 TURN_ON_NC
     /tmp/ccb2Hsuy.s:294    .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/ccb2Hsuy.s:377    .text.__vector_17:0000000000000000 __vector_17
     /tmp/ccb2Hsuy.s:1775   .bss:0000000000000002 RxLEDPulse
     /tmp/ccb2Hsuy.s:1770   .bss:0000000000000000 Timeout
     /tmp/ccb2Hsuy.s:490    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccb2Hsuy.s:533    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccb2Hsuy.s:1791   .data:0000000000000003 LineEncoding
     /tmp/ccb2Hsuy.s:618    .text.CDC_Task:0000000000000000 CDC_Task
                             .bss:0000000000000006 CurrAddress
     /tmp/ccb2Hsuy.s:1589   .text.startup.main:0000000000000000 main
     /tmp/ccb2Hsuy.s:1785   .data:0000000000000002 RunBootloader
     /tmp/ccb2Hsuy.s:1758   .rodata:0000000000000000 bootKeyPtr
     /tmp/ccb2Hsuy.s:1764   .data:0000000000000000 bootKey
     /tmp/ccb2Hsuy.s:613    .rodata.str1.1:0000000000000000 .LC0

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
__eerd_byte_m32u4
__eewr_byte_m32u4
USB_USBTask
__do_copy_data
__do_clear_bss
